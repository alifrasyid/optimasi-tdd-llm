{
  "Organizers": {
    "description": "An organizers is an entity running any number of events. In pretix, every event belongs to one organizer and various settings, such as teams and permissions, are managed on organizer level.",
    "fields": {
      "slug": {
        "type": "string",
        "description": "A short form of the name, used e.g. in URLs."
      },
      "public_url": {
        "type": "string",
        "description": "The public, customer-facing URL of the organizer, where the list of all events can be found (read-only)."
      }
    },
    "endpoints": {
      "GET /api/v1/organizers/": {
        "description": "Returns a list of all organizers the authenticated user/token has access to.",
        "name_test": "def test_organizer_list()",
        "path_parameters": [],
        "query_parameters": [
          {
            "name": "page",
            "description": "The page number in case of a multi-page result set, default is 1"
          },
          {
            "name": "ordering (string)",
            "description": "Manually set the ordering of results. Valid fields to be used are slug and name. Default: slug."
          }
        ],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          }
        ]
      },
      "GET /api/v1/organizers/(organizer)/": {
        "description": "Returns information on one organizer account, identified by its slug.",
        "name_test": "def test_organizer_detail()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to fetch"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer does not exist or you have no permission to view it."
          }
        ]
      },
      "GET /api/v1/organizers/(organizer)/settings/": {
        "description": "Get current values of organizer settings. Permission required: “Can change organizer settings”",
        "name_test": "def test_get_settings()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to access"
          }
        ],
        "query_parameters": [
          {
            "name": "explain",
            "description": "Set to true to enable verbose response mode"
          }
        ],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer does not exist or you have no permission to view this resource."
          }
        ]
      },
      "PATCH /api/v1/organizers/(organizer)/settings/": {
        "description": "Updates organizer settings. Note that PUT is not allowed here, only PATCH.",
        "name_test": "def test_patch_settings()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to update"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "400 Bad Request",
            "description": "The organizer could not be updated due to invalid submitted data."
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer does not exist or you have no permission to create this resource."
          }
        ]
      }
    }
  },
  "Events": {
    "description": "Events contain metadata and configuration fields that describe individual ticketing events.",
    "fields": {
      "slug": {
        "type": "string",
        "description": "A short form of the name, used e.g. in URLs."
      },
      "live": {
        "type": "boolean",
        "description": "If true, the event ticket shop is publicly available."
      },
      "testmode": {
        "type": "boolean",
        "description": "If true, the ticket shop is in test mode."
      },
      "currency": {
        "type": "string",
        "description": "The currency this event is handled in."
      },
      "date_from": {
        "type": "datetime",
        "description": "The event’s start date"
      },
      "date_to": {
        "type": "datetime",
        "description": "The event’s end date (or null)"
      },
      "date_admission": {
        "type": "datetime",
        "description": "The event’s admission date (or null)"
      },
      "is_public": {
        "type": "boolean",
        "description": "If true, the event shows up in places like the organizer’s public list of events"
      },
      "presale_start": {
        "type": "datetime",
        "description": "The date at which the ticket shop opens (or null)"
      },
      "presale_end": {
        "type": "datetime",
        "description": "The date at which the ticket shop closes (or null)"
      },
      "location": {
        "type": "multi-lingual string",
        "description": "The event location (or null)"
      },
      "geo_lat": {
        "type": "float",
        "description": "Latitude of the location (or null)"
      },
      "geo_lon": {
        "type": "float",
        "description": "Longitude of the location (or null)"
      },
      "has_subevents": {
        "type": "boolean",
        "description": "true if the event series feature is active for this event. Cannot change after event is created."
      },
      "meta_data": {
        "type": "object",
        "description": "Values set for organizer-specific meta data parameters. The allowed keys need to be set up as meta properties in the organizer configuration."
      },
      "plugins": {
        "type": "list",
        "description": "A list of package names of the enabled plugins for this event."
      },
      "seating_plan": {
        "type": "integer",
        "description": "If reserved seating is in use, the ID of a seating plan. Otherwise null."
      },
      "seat_category_mapping": {
        "type": "object",
        "description": "An object mapping categories of the seating plan (strings) to items in the event (integers or null)."
      },
      "timezone": {
        "type": "string",
        "description": "Event timezone name"
      },
      "item_meta_properties": {
        "type": "object",
        "description": "Item-specific meta data parameters and default values."
      },
      "valid_keys": {
        "type": "object",
        "description": "Cryptographic keys for non-default signature schemes. For performance reason, value is omitted in lists and only contained in detail views. Value can be cached."
      },
      "all_sales_channels": {
        "type": "boolean",
        "description": "If true (default), the event is available on all sales channels."
      },
      "limit_sales_channels": {
        "type": "list of strings",
        "description": "List of sales channel identifiers the event is available on if all_sales_channels is false."
      },
      "sales_channels": {
        "type": "list of strings",
        "description": "DEPRECATED. Legacy interface, use all_sales_channels and limit_sales_channels instead."
      },
      "public_url": {
        "type": "string",
        "description": "The public, customer-facing URL of the event (read-only)."
      }
    },
    "endpoints": {
      "GET /api/v1/organizers/(organizer)/events/": {
        "description": "Returns a list of all events within a given organizer the authenticated user/token has access to. Permission required: “Can change event settings”",
        "name_test": "def test_event_list()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of a valid organizer"
          }
        ],
        "query_parameters": [
          {
            "name": "page",
            "description": "The page number in case of a multi-page result set, default is 1"
          },
          {
            "name": "is_public",
            "description": "If set to true/false, only events with a matching value of is_public are returned."
          },
          {
            "name": "live",
            "description": "If set to true/false, only events with a matching value of live are returned."
          },
          {
            "name": "testmode",
            "description": "If set to true/false, only events with a matching value of testmode are returned."
          },
          {
            "name": "has_subevents",
            "description": "If set to true/false, only events with a matching value of has_subevents are returned."
          },
          {
            "name": "is_future",
            "description": "If set to true (false), only events that happen currently or in the future are (not) returned. Event series are never (always) returned."
          },
          {
            "name": "is_past",
            "description": "If set to true (false), only events that are over are (not) returned. Event series are never (always) returned."
          },
          {
            "name": "date_from_after",
            "description": "If set to a date and time, only events that start at or after the given time are returned."
          },
          {
            "name": "date_from_before",
            "description": "If set to a date and time, only events that start at or before the given time are returned."
          },
          {
            "name": "date_to_after",
            "description": "If set to a date and time, only events that have an end date and end at or after the given time are returned."
          },
          {
            "name": "ordering (string)",
            "description": "Manually set the ordering of results. Valid fields to be used are date_from and slug. Keep in mind that date_from of event series does not really tell you anything. Default: slug."
          },
          {
            "name": "attr[meta_data_key] (array)",
            "description": "By providing the key and value of a meta data attribute, the list of events will only contain the events matching the set criteria. Providing ?attr[Format]=Seminar would return only those events having set their Format meta data to Seminar, ?attr[Format]= only those, that have no value set. Please note that this filter will respect default values set on organizer level."
          },
          {
            "name": "sales_channel",
            "description": "If set to a sales channel identifier, only events allowed to be sold on the specified sales channel are returned."
          },
          {
            "name": "with_availability_for",
            "description": "If set to a sales channel identifier, the response will contain a special best_availability_state attribute with values of 100 for “tickets available”, values less than 100 for “tickets sold out or reserved”, and null for “status unknown”. These values might be served from a cache. This parameter can make the response slow."
          },
          {
            "name": "search",
            "description": "Only return events matching a given search query."
          }
        ],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer does not exist or you have no permission to view it."
          }
        ]
      },
      "GET /api/v1/organizers/(organizer)/events/(event)/": {
        "description": "Returns information on one event, identified by its slug. Permission required: “Can change event settings”",
        "name_test": "def test_event_get()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to fetch"
          },
          {
            "name": "event",
            "description": "The slug field of the event to fetch"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event does not exist or you have no permission to view it."
          }
        ]
      },
      "POST /api/v1/organizers/(organizer)/events/": {
        "description": "Creates a new event. Please note that events cannot be created as ‘live’ using this endpoint. Quotas and payment must be added to the event before sales can go live. Permission required: “Can create events”",
        "name_test": "def test_event_create()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer of the event to create."
          }
        ],
        "query_parameters": [
          {
            "name": "clone_from",
            "description": "Set to event_slug to clone data (settings, products, …) from an event with this slug in the same organizer or to organizer_slug/event_slug to clone from an event within a different organizer."
          }
        ],
        "status_codes": [
          {
            "name": "201 Created",
            "description": "no error"
          },
          {
            "name": "400 Bad Request",
            "description": "The event could not be created due to invalid submitted data."
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer does not exist or you have no permission to create this resource."
          }
        ]
      },
      "POST /api/v1/organizers/(organizer)/events/(event)/clone/": {
        "description": "Creates a new event with properties as set in the request body. The properties that are copied are: is_public, testmode, has_subevents, settings, plugin settings, items, variations, add-ons, quotas, categories, tax rules, questions. If the plugins, has_subevents, meta_data and/or is_public fields are present in the post body this will determine their value. Otherwise their value will be copied from the existing event. Please note that you can only copy from events under the same organizer this way. Use the clone_from parameter when creating a new event for this instead. Permission required: “Can create events”",
        "name_test": "def test_event_create_with_clone()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer of the event to create."
          },
          {
            "name": "event",
            "description": "The slug field of the event to copy settings and items from."
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "201 Created",
            "description": "no error"
          },
          {
            "name": "400 Bad Request",
            "description": "The event could not be created due to invalid submitted data."
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer does not exist or you have no permission to create this resource."
          }
        ]
      },
      "PATCH /api/v1/organizers/(organizer)/events/(event)/": {
        "description": "Updates an event. Permission required: “Can change event settings”",
        "name_test": "def test_event_update()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer of the event to update"
          },
          {
            "name": "event",
            "description": "The slug field of the event to update"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "400 Bad Request",
            "description": "The event could not be created due to invalid submitted data."
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event does not exist or you have no permission to create this resource."
          }
        ]
      },
      "DELETE /api/v1/organizers/(organizer)/events/(event)/": {
        "description": "Delete an event. Note that events with orders cannot be deleted to ensure data integrity. Permission required: “Can change event settings”",
        "name_test": "def test_event_delete()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to modify"
          },
          {
            "name": "event",
            "description": "The slug field of the event to delete"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "204 No Content",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event does not exist or you have no permission to delete this resource."
          }
        ]
      },
      "GET /api/v1/organizers/(organizer)/events/(event)/settings/": {
        "description": "Get current values of event settings. Permission required: “Can change event settings” (Exception: with device auth, some settings can always be read.)",
        "name_test": "def test_get_event_settings()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer of the event to access"
          },
          {
            "name": "event",
            "description": "The slug field of the event to access"
          }
        ],
        "query_parameters": [
          {
            "name": "explain",
            "description": "Set to true to enable verbose response mode"
          }
        ],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event does not exist or you have no permission to view this resource."
          }
        ]
      },
      "PATCH /api/v1/organizers/(organizer)/events/(event)/settings/": {
        "description": "Updates event settings. Note that PUT is not allowed here, only PATCH.",
        "name_test": "def test_patch_event_settings()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer of the event to update"
          },
          {
            "name": "event",
            "description": "The slug field of the event to update"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "400 Bad Request",
            "description": "The event could not be updated due to invalid submitted data."
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event does not exist or you have no permission to create this resource."
          }
        ]
      }
    }
  },
  "Event series dates / Sub-events": {
    "description": "Events can represent whole event series if the has_subevents property of the event is active. In this case, many other resources are additionally connected to an event date (also called sub-event).",
    "fields": {
      "name": {
        "type": "multi-lingual string",
        "description": "The sub-event’s full name"
      },
      "event": {
        "type": "string",
        "description": "The slug of the parent event"
      },
      "active": {
        "type": "boolean",
        "description": "If true, the sub-event ticket shop is publicly available."
      },
      "is_public": {
        "type": "boolean",
        "description": "If true, the sub-event ticket shop is publicly shown in lists."
      },
      "date_from": {
        "type": "datetime",
        "description": "The sub-event’s start date"
      },
      "date_to": {
        "type": "datetime",
        "description": "The sub-event’s end date (or null)"
      },
      "date_admission": {
        "type": "datetime",
        "description": "The sub-event’s admission date (or null)"
      },
      "presale_start": {
        "type": "datetime",
        "description": "The sub-date at which the ticket shop opens (or null)"
      },
      "presale_end": {
        "type": "datetime",
        "description": "The sub-date at which the ticket shop closes (or null)"
      },
      "frontpage_text": {
        "type": "multi-lingual string",
        "description": "The description of the event (or null)"
      },
      "location": {
        "type": "multi-lingual string",
        "description": "The sub-event location (or null)"
      },
      "geo_lat": {
        "type": "float",
        "description": "Latitude of the location (or null)"
      },
      "geo_lon": {
        "type": "float",
        "description": "Longitude of the location (or null)"
      },
      "item_price_overrides": {
        "type": "list of objects",
        "description": "List of items for which this sub-event overrides the default price or settings",
        "list": {
          "item": {
            "type": "integer",
            "description": "The internal item ID"
          },
          "disabled": {
            "type": "boolean",
            "description": "If true, item should not be available for this sub-event"
          },
          "available_from": {
            "type": "datetime",
            "description": "Start of availability (or null)"
          },
          "available_until": {
            "type": "datetime",
            "description": "End of availability (or null)"
          },
          "price": {
            "type": "money (string)",
            "description": "The price or null for the default price"
          }
        }
      },
      "variation_price_overrides": {
        "type": "list of objects",
        "description": "List of variations for which this sub-event overrides the default price or settings",
        "list": {
          "variation": {
            "type": "integer",
            "description": "The internal variation ID"
          },
          "disabled": {
            "type": "boolean",
            "description": "If true, variation should not be available for this sub-event"
          },
          "available_from": {
            "type": "datetime",
            "description": "Start of availability (or null)"
          },
          "available_until": {
            "type": "datetime",
            "description": "End of availability (or null)"
          },
          "price": {
            "type": "money (string)",
            "description": "The price or null for the default price"
          }
        }
      },
      "meta_data": {
        "type": "object",
        "description": "Values set for organizer-specific meta data parameters."
      },
      "seating_plan": {
        "type": "integer",
        "description": "If reserved seating is in use, the ID of a seating plan. Otherwise null."
      },
      "seat_category_mapping": {
        "type": "object",
        "description": "An object mapping categories of the seating plan (strings) to items in the event (integers or null)."
      },
      "last_modified": {
        "type": "datetime",
        "description": "Last modification of this object"
      }
    },
    "endpoints": {
      "GET /api/v1/organizers/(organizer)/events/(event)/subevents/": {
        "description": "Returns a list of all sub-events of an event.",
        "name_test": "def test_subevent_list()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of a valid organizer"
          },
          {
            "name": "event",
            "description": "The slug field of the main event"
          }
        ],
        "query_parameters": [
          {
            "name": "page",
            "description": "The page number in case of a multi-page result set, default is 1"
          },
          {
            "name": "is_public",
            "description": "If set to true/false, only subevents with a matching value of is_public are returned."
          },
          {
            "name": "active",
            "description": "If set to true/false, only events with a matching value of active are returned."
          },
          {
            "name": "is_future",
            "description": "If set to true (false), only events that happen currently or in the future are (not) returned."
          },
          {
            "name": "is_past",
            "description": "If set to true (false), only events that are over are (not) returned."
          },
          {
            "name": "date_from_after",
            "description": "If set to a date and time, only events that start at or after the given time are returned."
          },
          {
            "name": "date_from_before",
            "description": "If set to a date and time, only events that start at or before the given time are returned."
          },
          {
            "name": "date_to_after",
            "description": "If set to a date and time, only events that have an end date and end at or after the given time are returned."
          },
          {
            "name": "date_to_before",
            "description": "If set to a date and time, only events that have an end date and end at or before the given time are returned."
          },
          {
            "name": "ends_after",
            "description": "If set to a date and time, only events that happen during of after the given time are returned."
          },
          {
            "name": "search",
            "description": "Only return events matching a given search query."
          },
          {
            "name": "modified_since (datetime)",
            "description": "Only return objects that have changed since the given date. Be careful: This does not allow you to know if a subevent was deleted."
          },
          {
            "name": "attr[meta_data_key] (array)",
            "description": "By providing the key and value of a meta data attribute, the list of sub-events will only contain the sub-events matching the set criteria. Providing ?attr[Format]=Seminar would return only those sub-events having set their Format meta data to Seminar, ?attr[Format]= only those, that have no value set. Please note that this filter will respect default values set on organizer or event level."
          },
          {
            "name": "with_availability_for",
            "description": "If set to a sales channel identifier, the response will contain a special best_availability_state attribute with values of 100 for “tickets available”, values less than 100 for “tickets sold out or reserved”, and null for “status unknown”. These values might be served from a cache. This parameter can make the response slow."
          }
        ],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer does not exist or you have no permission to view it."
          }
        ]
      },
      "POST /api/v1/organizers/(organizer)/events/(event)/subevents/": {
        "description": "Creates a new subevent.\nPermission required: “Can create events”",
        "name_test": "def test_subevent_create()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of a valid organizer"
          },
          {
            "name": "event",
            "description": "The slug field of the main event"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "201 Created",
            "description": "no error"
          },
          {
            "name": "400 Bad Request",
            "description": "The sub-event could not be created due to invalid submitted data."
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer does not exist or you have no permission to create this resource."
          }
        ]
      },
      "GET /api/v1/organizers/(organizer)/events/(event)/subevents/(id)/": {
        "description": "Returns information on one sub-event, identified by its ID.",
        "name_test": "def test_subevent_detail()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of a valid organizer"
          },
          {
            "name": "event",
            "description": "The slug field of the main event"
          },
          {
            "name": "id",
            "description": "The id field of the sub-event to fetch"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event does not exist or you have no permission to view it."
          }
        ]
      },
      "PATCH /api/v1/organizers/(organizer)/events/(event)/subevents/(id)/": {
        "description": "Updates a sub-event, identified by its ID. You can also use PUT instead of PATCH. With PUT, you have to provide all fields of the resource, other fields will be reset to default. With PATCH, you only need to provide the fields that you want to change.\nPermission required: “Can change event settings”",
        "name_test": "def test_subevent_update()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of a valid organizer"
          },
          {
            "name": "event",
            "description": "The slug field of the main event"
          },
          {
            "name": "id",
            "description": "The id field of the sub-event to update"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "400 Bad Request",
            "description": "The sub-event could not be created due to invalid submitted data."
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/sub-event does not exist or you have no permission to update this resource."
          }
        ]
      },
      "DELETE /api/v1/organizers/(organizer)/events/(event)/subevents/(id)/": {
        "description": "Delete a sub-event. Note that events with orders cannot be deleted to ensure data integrity. Permission required: “Can change event settings”",
        "name_test": "def test_subevent_delete()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of a valid organizer"
          },
          {
            "name": "event",
            "description": "The slug field of the main event"
          },
          {
            "name": "id",
            "description": "The id field of the sub-event to delete"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "204 No Content",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/sub-event does not exist or you have no permission to delete this resource."
          }
        ]
      },
      "GET /api/v1/organizers/(organizer)/subevents/": {
        "description": "Returns a list of all sub-events of any event series you have access to within an organizer account.",
        "name_test": "def test_all_subevents_list_filter()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of a valid organizer"
          },
          {
            "name": "event",
            "description": "The slug field of the event to fetch"
          }
        ],
        "query_parameters": [
          {
            "name": "page",
            "description": "The page number in case of a multi-page result set, default is 1"
          },
          {
            "name": "is_public",
            "description": "If set to true/false, only subevents with a matching value of is_public are returned."
          },
          {
            "name": "active",
            "description": "If set to true/false, only events with a matching value of active are returned."
          },
          {
            "name": "event__live",
            "description": "If set to true/false, only events with a matching value of live on the parent event are returned."
          },
          {
            "name": "is_future",
            "description": "If set to true (false), only events that happen currently or in the future are (not) returned."
          },
          {
            "name": "is_past",
            "description": "If set to true (false), only events that are over are (not) returned."
          },
          {
            "name": "date_from_after",
            "description": "If set to a date and time, only events that start at or after the given time are returned."
          },
          {
            "name": "date_from_before",
            "description": "If set to a date and time, only events that start at or before the given time are returned."
          },
          {
            "name": "date_to_after",
            "description": "If set to a date and time, only events that have an end date and end at or after the given time are returned."
          },
          {
            "name": "date_to_before",
            "description": "If set to a date and time, only events that have an end date and end at or before the given time are returned."
          },
          {
            "name": "ends_after",
            "description": "If set to a date and time, only events that happen during of after the given time are returned."
          },
          {
            "name": "search",
            "description": "Only return events matching a given search query."
          },
          {
            "name": "sales_channel",
            "description": "If set to a sales channel identifier, the response will only contain subevents from events available on this sales channel."
          }
        ],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer does not exist or you have no permission to view it."
          }
        ]
      }
    }
  },
  "Tax rules": {
    "description": "Tax rules specify how tax should be calculated for specific products. Custom taxation rule sets are currently to available via the API.",
    "fields": {
      "name": {
        "type": "multi-lingual string",
        "description": "The tax rules’ name"
      },
      "internal_name": {
        "type": "string",
        "description": "An optional name that is only used in the backend"
      },
      "rate": {
        "type": "decimal (string)",
        "description": "Tax rate in percent"
      },
      "code": {
        "type": "string",
        "description": "Codified reason for tax rate (or null), see Tax codes."
      },
      "price_includes_tax": {
        "type": "boolean",
        "description": "If true (default), tax is assumed to be included in the specified product price"
      },
      "eu_reverse_charge": {
        "type": "boolean",
        "description": "DEPRECATED. If true, EU reverse charge rules are applied. Will be ignored if custom rules are set. Use custom rules instead."
      },
      "home_country": {
        "type": "string",
        "description": "Merchant country (required for reverse charge), can be null or empty string"
      },
      "keep_gross_if_rate_changes": {
        "type": "boolean",
        "description": "If true, changes of the tax rate based on custom rules keep the gross price constant (default is false)"
      },
      "custom_rules": {
        "type": "object",
        "description": "Dynamic rules specification. Each list element corresponds to one rule that will be processed in order. The current version of the schema in use can be found here."
      }
    },
    "endpoints": {
      "GET /api/v1/organizers/(organizer)/events/(event)/taxrules/": {
        "description": "Returns a list of all tax rules configured for an event.",
        "name_test": "def test_rule_list()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of a valid organizer"
          },
          {
            "name": "event",
            "description": "The slug field of the event to fetch"
          }
        ],
        "query_parameters": [
          {
            "name": "page",
            "description": "The page number in case of a multi-page result set, default is 1"
          }
        ],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer does not exist or you have no permission to view it."
          }
        ]
      },
      "GET /api/v1/organizers/(organizer)/events/(event)/taxrules/(id)/": {
        "description": "Returns information on one tax rule, identified by its ID.",
        "name_test": "def test_rule_detail()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to fetch"
          },
          {
            "name": "event",
            "description": "The slug field of the event to fetch"
          },
          {
            "name": "id",
            "description": "The id field of the tax rule to fetch"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event/rule does not exist or you have no permission to view it."
          }
        ]
      },
      "POST /api/v1/organizers/(organizer)/events/(event)/taxrules/": {
        "description": "Create a new tax rule.",
        "name_test": "def test_rule_create()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to create a tax rule for"
          },
          {
            "name": "event",
            "description": "The slug field of the event to create a tax rule for"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "201 Created",
            "description": "no error"
          },
          {
            "name": "400 Bad Request",
            "description": "The tax rule could not be created due to invalid submitted data."
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event does not exist or you have no permission to create tax rules."
          }
        ]
      },
      "PATCH /api/v1/organizers/(organizer)/events/(event)/taxrules/(id)/": {
        "description": "Update a tax rule. You can also use PUT instead of PATCH. With PUT, you have to provide all fields of the resource, other fields will be reset to default. With PATCH, you only need to provide the fields that you want to change.",
        "name_test": "def test_rule_update()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to modify"
          },
          {
            "name": "event",
            "description": "The slug field of the event to modify"
          },
          {
            "name": "id",
            "description": "The id field of the tax rule to modify"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "400 Bad Request",
            "description": "The tax rule could not be modified due to invalid submitted data."
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event/rule does not exist or you have no permission to change it."
          }
        ]
      },
      "DELETE /api/v1/organizers/(organizer)/events/(event)/taxrules/(id)/": {
        "description": "Delete a tax rule. Note that tax rules can only be deleted if they are not in use for any products, settings or orders. If you cannot delete a tax rule, this method will return a 403 status code and you can only discontinue using it everywhere else.",
        "name_test": "def test_rule_delete()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to modify"
          },
          {
            "name": "event",
            "description": "The slug field of the event to modify"
          },
          {
            "name": "id",
            "description": "The id field of the tax rule to delete"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "204 No Content",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event/rule does not exist or you have no permission to change it or this tax rule cannot be deleted since it is currently in use."
          }
        ]
      }
    }
  },
  "Item categories": {
    "description": "Categories provide grouping for items (better known as products).",
    "fields": {
      "name": {
        "type": "multi-lingual string",
        "description": "The category’s visible name"
      },
      "internal_name": {
        "type": "string",
        "description": "An optional name that is only used in the backend"
      },
      "description": {
        "type": "multi-lingual string",
        "description": "A public description (might include markdown, can be null)"
      },
      "position": {
        "type": "integer",
        "description": "An integer, used for sorting the categories"
      },
      "is_addon": {
        "type": "boolean",
        "description": "If true, items within this category are not on sale on their own but the category provides a source for defining add-ons for other products."
      },
      "cross_selling_mode": {
        "type": "string",
        "description": "If null, cross-selling is disabled for this category. If \"only\", it is only visible in the cross-selling step. If \"both\", it is visible on the normal index page as well. Only available if is_addon is false."
      },
      "cross_selling_condition": {
        "type": "string",
        "description": "Only relevant if cross_selling_mode is not null. If \"always\", always show in cross-selling step. If \"products\", only show if the cart contains one of the products listed in cross_selling_match_products. If \"discounts\", only show products that qualify for a discount according to discount rules."
      },
      "cross_selling_match_products": {
        "type": "list of integer",
        "description": "Only relevant if cross_selling_condition is \"products\". Internal ID of the items of which at least one needs to be in the cart for this category to be shown."
      }
    },
    "endpoints": {
      "GET /api/v1/organizers/(organizer)/events/(event)/categories/": {
        "description": "Returns a list of all categories within a given event.",
        "name_test": "def test_category_list()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to fetch"
          },
          {
            "name": "event",
            "description": "The slug field of the event to fetch"
          }
        ],
        "query_parameters": [
          {
            "name": "page (integer)",
            "description": "The page number in case of a multi-page result set, default is 1"
          },
          {
            "name": "is_addon (boolean)",
            "description": "If set to true or false, only categories with this value for the field is_addon will be returned."
          },
          {
            "name": "ordering (string)",
            "description": "Manually set the ordering of results. Valid fields to be used are id and position. Default: position"
          }
        ],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event does not exist or you have no permission to view this resource."
          }
        ]
      },
      "GET /api/v1/organizers/(organizer)/events/(event)/categories/(id)/": {
        "description": "Returns information on one category, identified by its ID.",
        "name_test": "def test_category_detail()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to fetch"
          },
          {
            "name": "event",
            "description": "The slug field of the event to fetch"
          },
          {
            "name": "id",
            "description": "The id field of the category to fetch"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event does not exist or you have no permission to view this resource."
          }
        ]
      },
      "POST /api/v1/organizers/(organizer)/events/(event)/categories/": {
        "description": "Creates a new category",
        "name_test": "def test_category_create()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer of the event to create a category for"
          },
          {
            "name": "event",
            "description": "The slug field of the event to create a category for"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "201 Created",
            "description": "no error"
          },
          {
            "name": "400 Bad Request",
            "description": "The category could not be created due to invalid submitted data."
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event does not exist or you have no permission to create this resource."
          }
        ]
      },
      "PATCH /api/v1/organizers/(organizer)/events/(event)/categories/(id)/": {
        "description": "Update a category. You can also use PUT instead of PATCH. With PUT, you have to provide all fields of the resource, other fields will be reset to default. With PATCH, you only need to provide the fields that you want to change.\nYou can change all fields of the resource except the id field.",
        "name_test": "def test_category_update()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to modify"
          },
          {
            "name": "event",
            "description": "The slug field of the event to modify"
          },
          {
            "name": "id",
            "description": "The id field of the category to modify"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "400 Bad Request",
            "description": "The category could not be modified due to invalid submitted data"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event does not exist or you have no permission to change this resource."
          }
        ]
      },
      "DELETE /api/v1/organizers/(organizer)/events/(event)/category/(id)/": {
        "description": "Delete a category.",
        "name_test": "def test_category_delete()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to modify"
          },
          {
            "name": "event",
            "description": "The slug field of the event to modify"
          },
          {
            "name": "id",
            "description": "The id field of the category to delete"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "204 No Content",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event does not exist or you have no permission to delete this resource."
          }
        ]
      }
    }
  },
  "Items": {
    "description": "Items (better known as products) are the things that can be sold using pretix.",
    "fields": {
      "name": {
        "type": "multi-lingual string",
        "description": "The item’s visible name"
      },
      "internal_name": {
        "type": "string",
        "description": "An optional name that is only used in the backend"
      },
      "default_price": {
        "type": "money (string)",
        "description": "The item price that is applied if the price is not overwritten by variations or other options."
      },
      "category": {
        "type": "integer",
        "description": "The ID of the category this item belongs to (or null)."
      },
      "active": {
        "type": "boolean",
        "description": "If false, the item is hidden from all public lists and will not be sold."
      },
      "description": {
        "type": "multi-lingual string",
        "description": "A public description of the item. May contain Markdown syntax or can be null."
      },
      "free_price": {
        "type": "boolean",
        "description": "If true, customers can change the price at which they buy the product (however, the price can’t be set lower than the price defined by default_price or otherwise)."
      },
      "free_price_suggestion": {
        "type": "money (string)",
        "description": "A suggested price, used as a default value if free_price is set (or null)."
      },
      "tax_rate": {
        "type": "decimal (string)",
        "description": "The VAT rate to be applied for this item (read-only, set through tax_rule)."
      },
      "tax_rule": {
        "type": "integer",
        "description": "The internal ID of the applied tax rule (or null)."
      },
      "admission": {
        "type": "boolean",
        "description": "true for items that grant admission to the event (such as primary tickets) and false for others (such as add-ons or merchandise)."
      },
      "personalized": {
        "type": "boolean",
        "description": "true for items that require personalization according to event settings. Only affects system-level fields, not custom questions. Currently only allowed for products with admission set to true. For backwards compatibility, when creating new items and this field is not given, it defaults to the same value as admission."
      },
      "position": {
        "type": "integer",
        "description": "An integer, used for sorting"
      },
      "picture": {
        "type": "file",
        "description": "A product picture to be displayed in the shop (can be null)."
      },
      "all_sales_channels": {
        "type": "boolean",
        "description": "If true (default), the item is available on all sales channels."
      },
      "limit_sales_channels": {
        "type": "list of strings",
        "description": "List of sales channel identifiers the item is available on if all_sales_channels is false."
      },
      "sales_channels": {
        "type": "list of strings",
        "description": "DEPRECATED. Legacy interface, use all_sales_channels and limit_sales_channels instead."
      },
      "available_from": {
        "type": "datetime",
        "description": "The first date time at which this item can be bought (or null)."
      },
      "available_from_mode": {
        "type": "string",
        "description": "If hide (the default), this item is hidden in the shop if unavailable due to the available_from setting. If info, the item is visible, but can’t be purchased, and a note explaining the unavailability is displayed."
      },
      "available_until": {
        "type": "datetime",
        "description": "The last date time at which this item can be bought (or null)."
      },
      "available_until_mode": {
        "type": "string",
        "description": "If hide (the default), this item is hidden in the shop if unavailable due to the available_until setting. If info, the item is visible, but can’t be purchased, and a note explaining the unavailability is displayed."
      },
      "hidden_if_available": {
        "type": "integer",
        "description": "DEPRECATED The internal ID of a quota object, or null. If set, this item won’t be shown publicly as long as this quota is available."
      },
      "hidden_if_item_available": {
        "type": "integer",
        "description": "The internal ID of a different item, or null. If set, this item won’t be shown publicly as long as this other item is available."
      },
      "hidden_if_item_available_mode": {
        "type": "string",
        "description": "If hide (the default), this item is hidden in the shop if unavailable due to the hidden_if_item_available setting. If info, the item is visible, but can’t be purchased, and a note explaining the unavailability is displayed."
      },
      "require_voucher": {
        "type": "boolean",
        "description": "If true, this item can only be bought using a voucher that is specifically assigned to this item."
      },
      "hide_without_voucher": {
        "type": "boolean",
        "description": "If true, this item is only shown during the voucher redemption process, but not in the normal shop frontend."
      },
      "allow_cancel": {
        "type": "boolean",
        "description": "If false, customers cannot cancel orders containing this item."
      },
      "min_per_order": {
        "type": "integer",
        "description": "This product can only be bought if it is included at least this many times in the order (or null for no limitation)."
      },
      "max_per_order": {
        "type": "integer",
        "description": "This product can only be bought if it is included at most this many times in the order (or null for no limitation)."
      },
      "checkin_attention": {
        "type": "boolean",
        "description": "If true, the check-in app should show a warning that this ticket requires special attention if such a product is being scanned."
      },
      "checkin_text": {
        "type": "string",
        "description": "Text that will be shown if a ticket of this type is scanned (or null)."
      },
      "original_price": {
        "type": "money (string)",
        "description": "An original price, shown for comparison, not used for price calculations (or null)."
      },
      "require_approval": {
        "type": "boolean",
        "description": "If true, orders with this product will need to be approved by the event organizer before they can be paid."
      },
      "require_bundling": {
        "type": "boolean",
        "description": "If true, this item is only available as part of bundles."
      },
      "require_membership": {
        "type": "boolean",
        "description": "If true, booking this item requires an active membership."
      },
      "require_membership_hidden": {
        "type": "boolean",
        "description": "If true and require_membership is set, this product will be hidden from users without a valid membership."
      },
      "require_membership_types": {
        "type": "list of integers",
        "description": "Internal IDs of membership types valid if require_membership is true"
      },
      "grant_membership_type": {
        "type": "integer",
        "description": "If set to the internal ID of a membership type, purchasing this item will create a membership of the given type."
      },
      "grant_membership_duration_like_event": {
        "type": "boolean",
        "description": "If true, the membership created through grant_membership_type will derive its term from date_from to date_to of the purchased (sub)event."
      },
      "grant_membership_duration_days": {
        "type": "integer",
        "description": "If grant_membership_duration_like_event is false, this sets the number of days for the membership."
      },
      "grant_membership_duration_months": {
        "type": "integer",
        "description": "If grant_membership_duration_like_event is false, this sets the number of calendar months for the membership."
      },
      "validity_mode": {
        "type": "string",
        "description": "If null, tickets generated for this product do not have special validity behavior, but follow event configuration and can be limited e.g. through check-in rules. Other values are \"fixed\" and \"dynamic\""
      },
      "validity_fixed_from": {
        "type": "datetime",
        "description": "If validity_mode is \"fixed\", this is the start of validity for issued tickets."
      },
      "validity_fixed_until": {
        "type": "datetime",
        "description": "If validity_mode is \"fixed\", this is the end of validity for issued tickets."
      },
      "validity_dynamic_duration_minutes": {
        "type": "integer",
        "description": "If validity_mode is \"dynamic\", this is the “minutes” component of the ticket validity duration."
      },
      "validity_dynamic_duration_hours": {
        "type": "integer",
        "description": "If validity_mode is \"dynamic\", this is the “hours” component of the ticket validity duration."
      },
      "validity_dynamic_duration_days": {
        "type": "integer",
        "description": "If validity_mode is \"dynamic\", this is the “days” component of the ticket validity duration."
      },
      "validity_dynamic_duration_months": {
        "type": "integer",
        "description": "If validity_mode is \"dynamic\", this is the “months” component of the ticket validity duration."
      },
      "validity_dynamic_start_choice": {
        "type": "boolean",
        "description": "If validity_mode is \"dynamic\" and this is true, customers can choose the start of validity."
      },
      "validity_dynamic_start_choice_day_limit": {
        "type": "boolean",
        "description": "If validity_mode is \"dynamic\" and validity_dynamic_start_choice is true, this is the maximum number of days the start can be in the future."
      },
      "generate_tickets": {
        "type": "boolean",
        "description": "If false, tickets are never generated for this product, regardless of other settings. If true, tickets are generated even if this is a non-admission or add-on product, regardless of event settings. If this is null, regular ticketing rules apply."
      },
      "allow_waitinglist": {
        "type": "boolean",
        "description": "If false, no waiting list will be shown for this product when it is sold out."
      },
      "issue_giftcard": {
        "type": "boolean",
        "description": "If true, buying this product will yield a gift card."
      },
      "media_policy": {
        "type": "string",
        "description": "Policy on how to handle reusable media (experimental feature). Possible values are null, \"new\", \"reuse\", and \"reuse_or_new\"."
      },
      "media_type": {
        "type": "string",
        "description": "Type of reusable media to work on (experimental feature). See Reusable media for possible choices."
      },
      "show_quota_left": {
        "type": "boolean",
        "description": "Publicly show how many tickets are still available. If this is null, the event default is used."
      },
      "has_variations": {
        "type": "boolean",
        "description": "Shows whether or not this item has variations."
      },
      "variations": {
        "type": "list of objects",
        "description": "A list with one object for each variation of this item. Can be empty. Only writable during creation, use separate endpoint to modify this later.",
        "list": {
          "id": {
            "type": "integer",
            "description": "Internal ID of the variation"
          },
          "value": {
            "type": "multi-lingual string",
            "description": "The “name” of the variation"
          },
          "default_price": {
            "type": "money (string)",
            "description": "The price set directly for this variation or null"
          },
          "price": {
            "type": "money (string)",
            "description": "The price used for this variation. This is either the same as default_price if that value is set or equal to the item’s default_price."
          },
          "free_price_suggestion": {
            "type": "money (string)",
            "description": "A suggested price, used as a default value if free_price is set (or null)."
          },
          "original_price": {
            "type": "money (string)",
            "description": "An original price, shown for comparison, not used for price calculations (or null)."
          },
          "active": {
            "type": "boolean",
            "description": "If false, this variation will not be sold or shown."
          },
          "description": {
            "type": "multi-lingual string",
            "description": "A public description of the variation. May contain"
          },
          "checkin_attention": {
            "type": "boolean",
            "description": "If true, the check-in app should show a warning that this ticket requires special attention if such a variation is being scanned."
          },
          "checkin_text": {
            "type": "string",
            "description": "Text that will be shown if a ticket of this type is scanned (or null)."
          },
          "require_approval": {
            "type": "boolean",
            "description": "If true, orders with this variation will need to be approved by the event organizer before they can be paid."
          },
          "require_membership": {
            "type": "boolean",
            "description": "If true, booking this variation requires an active membership."
          },
          "require_membership_hidden": {
            "type": "boolean",
            "description": "If true and require_membership is set, this variation will be hidden from users without a valid membership."
          },
          "require_membership_types": {
            "type": "list of integers",
            "description": "Internal IDs of membership types valid if require_membership is true Markdown syntax or can be null."
          },
          "all_sales_channels": {
            "type": "boolean",
            "description": "If true (default), the variation is available on all sales channels."
          },
          "limit_sales_channels": {
            "type": "list of strings",
            "description": "List of sales channel identifiers the variation is available on if all_sales_channels is false. The item-level list takes precedence, i.e. a sales channel needs to be on both lists for the variation to be available (unless all_sales_channels is used)."
          },
          "sales_channels": {
            "type": "list of strings",
            "description": "DEPRECATED. Legacy interface, use all_sales_channels and limit_sales_channels instead."
          },
          "available_from": {
            "type": "datetime",
            "description": "The first date time at which this variation can be bought (or null)."
          },
          "available_from_mode": {
            "type": "string",
            "description": "If hide (the default), this variation is hidden in the shop if unavailable due to the available_from setting. If info, the variation is visible, but can’t be purchased, and a note explaining the unavailability is displayed."
          },
          "available_until": {
            "type": "datetime",
            "description": "The last date time at which this variation can be bought (or null)."
          },
          "available_until_mode": {
            "type": "string",
            "description": "If hide (the default), this variation is hidden in the shop if unavailable due to the available_until setting. If info, the variation is visible, but can’t be purchased, and a note explaining the unavailability is displayed."
          },
          "hide_without_voucher": {
            "type": "boolean",
            "description": "If true, this variation is only shown during the voucher redemption process, but not in the normal shop frontend."
          },
          "meta_data": {
            "type": "object",
            "description": "Values set for event-specific meta data parameters."
          },
          "position": {
            "type": "integer",
            "description": "An integer, used for sorting"
          }
        }
      },
      "addons": {
        "type": "list of objects",
        "description": "Definition of add-ons that can be chosen for this item. Only writable during creation, use separate endpoint to modify this later.",
        "list": {
          "addon_category": {
            "type": "integer",
            "description": "Internal ID of the item category the add-on can be chosen from."
          },
          "min_count": {
            "type": "integer",
            "description": "The minimal number of add-ons that need to be chosen."
          },
          "max_count": {
            "type": "integer",
            "description": "The maximal number of add-ons that can be chosen."
          },
          "position": {
            "type": "integer",
            "description": "An integer, used for sorting"
          },
          "multi_allowed": {
            "type": "boolean",
            "description": "Adding the same item multiple times is allowed"
          },
          "price_included": {
            "type": "boolean",
            "description": "Adding this add-on to the item is free"
          }
        }
      },
      "bundles": {
        "type": "list of objects",
        "description": "Definition of bundles that are included in this item. Only writable during creation, use separate endpoint to modify this later.",
        "list": {
          "bundled_item": {
            "type": "integer",
            "description": "Internal ID of the item that is included."
          },
          "bundled_variation": {
            "type": "integer",
            "description": "Internal ID of the variation of the item (or null)."
          },
          "count": {
            "type": "integer",
            "description": "Number of items included"
          },
          "designated_price": {
            "type": "money (string)",
            "description": "Designated price of the bundled product. This will be used to split the price of the base item e.g. for mixed taxation. This is not added to the price."
          }
        }
      },
      "meta_data": {
        "type": "object",
        "description": "Values set for event-specific meta data parameters."
      }
    },
    "endpoints": {
      "GET /api/v1/organizers/(organizer)/events/(event)/items/": {
        "description": "Returns a list of all items within a given event.",
        "name_test": "def test_item_list()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to fetch"
          },
          {
            "name": "event",
            "description": "The slug field of the event to fetch"
          }
        ],
        "query_parameters": [
          {
            "name": "page (integer)",
            "description": "The page number in case of a multi-page result set, default is 1"
          },
          {
            "name": "search (string)",
            "description": "Filter the list by internal name or name of the item (substring search)."
          },
          {
            "name": "active (boolean)",
            "description": "If set to true or false, only items with this value for the field active will be returned."
          },
          {
            "name": "category (integer)",
            "description": "If set to the ID of a category, only items within that category will be returned."
          },
          {
            "name": "admission (boolean)",
            "description": "If set to true or false, only items with this value for the field admission will be returned."
          },
          {
            "name": "tax_rate (string)",
            "description": "If set to a decimal value, only items with this tax rate will be returned."
          },
          {
            "name": "free_price (boolean)",
            "description": "If set to true or false, only items with this value for the field free_price will be returned."
          },
          {
            "name": "ordering (string)",
            "description": "Manually set the ordering of results. Valid fields to be used are id and position. Default: position"
          }
        ],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event does not exist or you have no permission to view this resource."
          }
        ]
      },
      "GET /api/v1/organizers/(organizer)/events/(event)/items/(id)/": {
        "description": "Returns information on one item, identified by its ID.",
        "name_test": "def test_item_detail()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to fetch"
          },
          {
            "name": "event",
            "description": "The slug field of the event to fetch"
          },
          {
            "name": "id",
            "description": "The id field of the item to fetch"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event does not exist or you have no permission to view this resource."
          }
        ]
      },
      "POST /api/v1/organizers/(organizer)/events/(event)/items/": {
        "description": "Creates a new item",
        "name_test": "def test_item_create()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer of the event to create an item for"
          },
          {
            "name": "event",
            "description": "The slug field of the event to create an item for"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "201 Created",
            "description": "no error"
          },
          {
            "name": "400 Bad Request",
            "description": "The item could not be created due to invalid submitted data."
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event does not exist or you have no permission to create this resource."
          }
        ]
      },
      "PATCH /api/v1/organizers/(organizer)/events/(event)/items/(id)/": {
        "description": "Update an item. You can also use PUT instead of PATCH. With PUT, you have to provide all fields of the resource, other fields will be reset to default. With PATCH, you only need to provide the fields that you want to change. You can change all fields of the resource except the has_variations, variations and the addon field. If you need to update/delete variations or add-ons please use the nested dedicated endpoints.",
        "name_test": "def test_item_update()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to modify"
          },
          {
            "name": "event",
            "description": "The slug field of the event to modify"
          },
          {
            "name": "id",
            "description": "The id field of the item to modify"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "400 Bad Request",
            "description": "The item could not be modified due to invalid submitted data"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event does not exist or you have no permission to change this resource."
          }
        ]
      },
      "DELETE /api/v1/organizers/(organizer)/events/(event)/items/(id)/": {
        "description": "Delete an item.",
        "name_test": "def test_items_delete()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to modify"
          },
          {
            "name": "event",
            "description": "The slug field of the event to modify"
          },
          {
            "name": "id",
            "description": "The id field of the item to delete"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "204 No Content",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event does not exist or you have no permission to delete this resource."
          }
        ]
      }
    }
  },
  "Item variations": {
    "description": "Variations of items can be use for products (items) that are available in different sizes, colors or other variations of the same product.",
    "fields": {
      "default_price": {
        "type": "money (string)",
        "description": "The price set directly for this variation or null"
      },
      "price": {
        "type": "money (string)",
        "description": "The price used for this variation. This is either the same as default_price if that value is set or equal to the item’s default_price (read-only)."
      },
      "free_price_suggestion": {
        "type": "money (string)",
        "description": "A suggested price, used as a default value if Item.free_price is set (or null)."
      },
      "original_price": {
        "type": "money (string)",
        "description": "An original price, shown for comparison, not used for price calculations (or null)."
      },
      "active": {
        "type": "boolean",
        "description": "If false, this variation will not be sold or shown."
      },
      "description": {
        "type": "multi-lingual string",
        "description": "A public description of the variation. May contain Markdown syntax or can be null."
      },
      "position": {
        "type": "integer",
        "description": "An integer, used for sorting"
      },
      "checkin_attention": {
        "type": "boolean",
        "description": "If true, the check-in app should show a warning that this ticket requires special attention if such a variation is being scanned."
      },
      "checkin_text": {
        "type": "string",
        "description": "Text that will be shown if a ticket of this type is scanned (or null)."
      },
      "require_approval": {
        "type": "boolean",
        "description": "If true, orders with this variation will need to be approved by the event organizer before they can be paid."
      },
      "require_membership": {
        "type": "boolean",
        "description": "If true, booking this variation requires an active membership."
      },
      "require_membership_hidden": {
        "type": "boolean",
        "description": "If true and require_membership is set, this variation will be hidden from users without a valid membership."
      },
      "require_membership_types": {
        "type": "list of integers",
        "description": "Internal IDs of membership types valid if require_membership is true"
      },
      "all_sales_channels": {
        "type": "boolean",
        "description": "If true (default), the variation is available on all sales channels."
      },
      "limit_sales_channels": {
        "type": "list of strings",
        "description": "List of sales channel identifiers the variation is available on if all_sales_channels is false. The item-level list takes precedence, i.e. a sales channel needs to be on both lists for the variation to be available (unless all_sales_channels is used)."
      },
      "sales_channels": {
        "type": "list of strings",
        "description": "DEPRECATED. Legacy interface, use all_sales_channels and limit_sales_channels instead."
      },
      "available_from": {
        "type": "datetime",
        "description": "The first date time at which this variation can be bought (or null)."
      },
      "available_from_mode": {
        "type": "string",
        "description": "If hide (the default), this variation is hidden in the shop if unavailable due to the available_from setting. If info, the variation is visible, but can’t be purchased, and a note explaining the unavailability is displayed."
      },
      "available_until": {
        "type": "datetime",
        "description": "The last date time at which this variation can be bought (or null)."
      },
      "available_until_mode": {
        "type": "string",
        "description": "If hide (the default), this variation is hidden in the shop if unavailable due to the available_until setting. If info, the variation is visible, but can’t be purchased, and a note explaining the unavailability is displayed."
      },
      "hide_without_voucher": {
        "type": "boolean",
        "description": "If true, this variation is only shown during the voucher redemption process, but not in the normal shop frontend."
      },
      "meta_data": {
        "type": "object",
        "description": "Values set for event-specific meta data parameters."
      }
    },
    "endpoints": {
      "GET /api/v1/organizers/(organizer)/events/(event)/items/(item)/variations/": {
        "description": "Returns a list of all variations for a given item.",
        "name_test": "def test_item_list()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to fetch"
          },
          {
            "name": "event",
            "description": "The slug field of the event to fetch"
          },
          {
            "name": "item",
            "description": "The id field of the item to fetch"
          }
        ],
        "query_parameters": [
          {
            "name": "page (integer)",
            "description": "The page number in case of a multi-page result set, default is 1"
          },
          {
            "name": "search (string)",
            "description": "Filter the list by the value of the variation (substring search)."
          },
          {
            "name": "active (boolean)",
            "description": "If set to true or false, only items with this value for the field active will be returned."
          }
        ],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event/item does not exist or you have no permission to view this resource."
          }
        ]
      },
      "GET /api/v1/organizers/(organizer)/events/(event)/items/(item)/variations/(id)/": {
        "description": "Returns information on one variation, identified by its ID.",
        "name_test": "def test_item_detail()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to fetch"
          },
          {
            "name": "event",
            "description": "The slug field of the event to fetch"
          },
          {
            "name": "item",
            "description": "The id field of the item to fetch"
          },
          {
            "name": "id",
            "description": "The id field of the variation to fetch"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event does not exist or you have no permission to view this resource."
          }
        ]
      },
      "POST /api/v1/organizers/(organizer)/events/(event)/items/(item)/variations/": {
        "description": "Creates a new variation",
        "name_test": "def test_variations_create()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer of the event/item to create a variation for"
          },
          {
            "name": "event",
            "description": "The slug field of the event to create a variation for"
          },
          {
            "name": "item",
            "description": "The id field of the item to create a variation for"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "201 Created",
            "description": "no error"
          },
          {
            "name": "400 Bad Request",
            "description": "The variation could not be created due to invalid submitted data."
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event does not exist or you have no permission to create this resource."
          }
        ]
      },
      "PATCH /api/v1/organizers/(organizer)/events/(event)/items/(item)/variations/(id)/": {
        "description": "Update a variation. You can also use PUT instead of PATCH. With PUT, you have to provide all fields of the resource, other fields will be reset to default. With PATCH, you only need to provide the fields that you want to change.\n You can change all fields of the resource except the id and the price field.",
        "name_test": "def test_variations_update()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to modify"
          },
          {
            "name": "event",
            "description": "The slug field of the event to modify"
          },
          {
            "name": "id",
            "description": "The id field of the item to modify"
          },
          {
            "name": "id",
            "description": "The id field of the variation to modify"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "400 Bad Request",
            "description": "The variation could not be modified due to invalid submitted data"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event does not exist or you have no permission to change this resource."
          }
        ]
      },
      "DELETE /api/v1/organizers/(organizer)/events/(event)/items/(id)/variations/(id)/": {
        "description": "Delete a variation.",
        "name_test": "def test_variations_delete()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to modify"
          },
          {
            "name": "event",
            "description": "The slug field of the event to modify"
          },
          {
            "name": "id",
            "description": "The id field of the item to modify"
          },
          {
            "name": "id",
            "description": "The id field of the variation to delete"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "204 No Content",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event does not exist or you have no permission to delete this resource."
          }
        ]
      }
    }
  },
  "Item bundles": {
    "description": "With bundles, you can specify products that are included within other products. There are two premier use cases of this:\n\n- Package discounts. For example, you could offer a discounted package that includes three tickets but can only be bought as a whole. With a bundle including three times the usual product, the package will automatically pull three sub-items into the cart, making sure of correct quota calculation and issuance of the correct number of tickets.\n\n- Tax splitting. For example, if your conference ticket includes a part that is subject to different taxation and that you need to put on the invoice separately. When you putting a “designated price” on a bundled sub-item, pretix will use that price to show a split taxation.",
    "fields": {
      "bundled_item": {
        "type": "integer",
        "description": "Internal ID of the item that is included."
      },
      "bundled_variation": {
        "type": "integer",
        "description": "Internal ID of the variation of the item (or null)."
      },
      "count": {
        "type": "integer",
        "description": "Number of items included"
      },
      "designated_price": {
        "type": "money (string)",
        "description": "Designated price of the bundled product. This will be used to split the price of the base item e.g. for mixed taxation. This is not added to the price."
      }
    },
    "endpoints": {
      "GET /api/v1/organizers/(organizer)/events/(event)/items/(item)/bundles/": {
        "description": "Returns a list of all bundles for a given item.",
        "name_test": "def test_bundles_list()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to fetch"
          },
          {
            "name": "event",
            "description": "The slug field of the event to fetch"
          },
          {
            "name": "item",
            "description": "The id field of the item to fetch"
          }
        ],
        "query_parameters": [
          {
            "name": "page (integer)",
            "description": "The page number in case of a multi-page result set, default is 1"
          }
        ],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event/item does not exist or you have no permission to view this resource."
          }
        ]
      },
      "GET /api/v1/organizers/(organizer)/events/(event)/items/(item)/bundles/(id)/": {
        "description": "Returns information on one bundle configuration, identified by its ID.",
        "name_test": "def test_bundles_detail()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to fetch"
          },
          {
            "name": "event",
            "description": "The slug field of the event to fetch"
          },
          {
            "name": "item",
            "description": "The id field of the item to fetch"
          },
          {
            "name": "id",
            "description": "The id field of the bundle to fetch"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event does not exist or you have no permission to view this resource."
          }
        ]
      },
      "POST /api/v1/organizers/bigevents/events/sampleconf/items/1/bundles/": {
        "description": "Creates a new bundle configuration",
        "name_test": "def test_bundles_create()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer of the event/item to create a bundle-configuration for"
          },
          {
            "name": "event",
            "description": "The slug field of the event to create a bundle configuration for"
          },
          {
            "name": "item",
            "description": "The id field of the item to create a bundle configuration for"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "201 Created",
            "description": "no error"
          },
          {
            "name": "400 Bad Request",
            "description": "The bundle could not be created due to invalid submitted data."
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event does not exist or you have no permission to create this resource."
          }
        ]
      },
      "PATCH /api/v1/organizers/(organizer)/events/(event)/items/(item)/bundles/(id)/": {
        "description": "Update a bundle configuration. You can also use PUT instead of PATCH. With PUT, you have to provide all fields of the resource, other fields will be reset to default. With PATCH, you only need to provide the fields that you want to change.\nYou can change all fields of the resource except the id field.",
        "name_test": "def test_bundles_update()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to modify"
          },
          {
            "name": "event",
            "description": "The slug field of the event to modify"
          },
          {
            "name": "item",
            "description": "The id field of the item to modify"
          },
          {
            "name": "id",
            "description": "The id field of the bundle to modify"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "400 Bad Request",
            "description": "The bundle configuration could not be modified due to invalid submitted data"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event does not exist or you have no permission to change this resource."
          }
        ]
      },
      "DELETE /api/v1/organizers/(organizer)/events/(event)/items/(id)/bundles/(id)/": {
        "description": "Delete a bundle configuration.",
        "name_test": "def test_bundles_delete()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to modify"
          },
          {
            "name": "event",
            "description": "The slug field of the event to modify"
          },
          {
            "name": "id",
            "description": "The id field of the bundle to delete"
          },
          {
            "name": "id",
            "description": "The id field of the item to modify"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "204 No Content",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event does not exist or you have no permission to delete this resource."
          }
        ]
      }
    }
  },
  "Item add-ons": {
    "description": "With add-ons, you can specify products that can be bought as an addition to this specific product. For example, if you host a conference with a base conference ticket and a number of workshops, you could define the workshops as add-ons to the conference ticket. With this configuration, the workshops cannot be bought on their own but only in combination with a conference ticket. You can here specify categories of products that can be used as add-ons to this product. You can also specify the minimum and maximum number of add-ons of the given category that can or need to be chosen. The user can buy every add-on from the category at most once. If an add-on product has multiple variations, only one of them can be bought.",
    "fields": {
      "addon_category": {
        "type": "integer",
        "description": "Internal ID of the item category the add-on can be chosen from."
      },
      "min_count": {
        "type": "integer",
        "description": "The minimal number of add-ons that need to be chosen."
      },
      "max_count": {
        "type": "integer",
        "description": "The maximal number of add-ons that can be chosen."
      },
      "position": {
        "type": "integer",
        "description": "An integer, used for sorting"
      },
      "multi_allowed": {
        "type": "boolean",
        "description": "Adding the same item multiple times is allowed"
      },
      "price_included": {
        "type": "boolean",
        "description": "Adding this add-on to the item is free"
      }
    },
    "endpoints": {
      "GET /api/v1/organizers/(organizer)/events/(event)/items/(item)/addons/": {
        "description": "Returns a list of all add-ons for a given item.",
        "name_test": "def test_addons_list()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to fetch"
          },
          {
            "name": "event",
            "description": "The slug field of the event to fetch"
          },
          {
            "name": "item",
            "description": "The id field of the item to fetch"
          }
        ],
        "query_parameters": [
          {
            "name": "page (integer)",
            "description": "The page number in case of a multi-page result set, default is 1"
          }
        ],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event/item does not exist or you have no permission to view this resource."
          }
        ]
      },
      "GET /api/v1/organizers/(organizer)/events/(event)/items/(item)/addons/(id)/": {
        "description": "Returns information on one add-on, identified by its ID.",
        "name_test": "def test_addons_detail()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to fetch"
          },
          {
            "name": "event",
            "description": "The slug field of the event to fetch"
          },
          {
            "name": "item",
            "description": "The id field of the item to fetch"
          },
          {
            "name": "id",
            "description": "The id field of the add-on to fetch"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event does not exist or you have no permission to view this resource."
          }
        ]
      },
      "POST /api/v1/organizers/bigevents/events/sampleconf/items/1/addons/": {
        "description": "Creates a new add-on",
        "name_test": "def test_addons_create()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer of the event/item to create a add-on for"
          },
          {
            "name": "event",
            "description": "The slug field of the event to create a add-on for"
          },
          {
            "name": "item",
            "description": "The id field of the item to create a add-on for"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "201 Created",
            "description": "no error"
          },
          {
            "name": "400 Bad Request",
            "description": "The add-on could not be created due to invalid submitted data."
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event does not exist or you have no permission to create this resource."
          }
        ]
      },
      "PATCH /api/v1/organizers/(organizer)/events/(event)/items/(item)/addon/(id)/": {
        "description": "Update an add-on. You can also use PUT instead of PATCH. With PUT, you have to provide all fields of the resource, other fields will be reset to default. With PATCH, you only need to provide the fields that you want to change.\nYou can change all fields of the resource except the id field.",
        "name_test": "def test_addons_update()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to modify"
          },
          {
            "name": "event",
            "description": "The slug field of the event to modify"
          },
          {
            "name": "item",
            "description": "The id field of the item to modify"
          },
          {
            "name": "id",
            "description": "The id field of the add-on to modify"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "400 Bad Request",
            "description": "The add-on could not be modified due to invalid submitted data"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event does not exist or you have no permission to change this resource."
          }
        ]
      },
      "DELETE /api/v1/organizers/(organizer)/events/(event)/items/(id)/addons/(id)/": {
        "description": "Delete an add-on.",
        "name_test": "def test_addons_delete()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to modify"
          },
          {
            "name": "event",
            "description": "The slug field of the event to modify"
          },
          {
            "name": "id",
            "description": "The id field of the item to modify"
          },
          {
            "name": "id",
            "description": "The id field of the add-on to delete"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "204 No Content",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event does not exist or you have no permission to delete this resource."
          }
        ]
      }
    }
  },
  "Item Meta Properties": {
    "description": "An Item Meta Property is used to include (event internally relevant) meta information with every item (product). This could be internal categories like booking positions.",
    "fields": {
      "name": {
        "type": "string",
        "description": "Name of the property"
      },
      "default": {
        "type": "string",
        "description": "Value of the default option"
      },
      "required": {
        "type": "boolean",
        "description": "If true, this property will have to be assigned a value in all items of the related event"
      },
      "allowed_values": {
        "type": "list",
        "description": "List of all permitted values for this property, or null for no limitation"
      }
    },
    "endpoints": {
      "GET /api/v1/organizers/(organizer)/events/(event)/item_meta_properties/": {
        "description": "Returns a list of all Item Meta Properties within a given event.",
        "name_test": "def test_meta_property_list()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer"
          },
          {
            "name": "event",
            "description": "The slug field of the event"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer does not exist or you have no permission to view this resource."
          }
        ]
      },
      "GET /api/v1/organizers/(organizer)/events/(event)/item_meta_properties/(id)/": {
        "description": "Returns information on one property, identified by its id.",
        "name_test": "def test_meta_property_detail()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer"
          },
          {
            "name": "event",
            "description": "The slug field of the event"
          },
          {
            "name": "id",
            "description": "The id field of the item meta property to retrieve"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer does not exist or you have no permission to view this resource."
          }
        ]
      },
      "POST /api/v1/organizers/(organizer)/events/(event)/item_meta_properties/": {
        "description": "Creates a new item meta property",
        "name_test": "def test_meta_property_create()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer"
          },
          {
            "name": "event",
            "description": "The slug field of the event"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "201 Created",
            "description": "no error"
          },
          {
            "name": "400 Bad Request",
            "description": "The item meta property could not be created due to invalid submitted data."
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer does not exist or you have no permission to create this resource."
          }
        ]
      },
      "PATCH /api/v1/organizers/(organizer)/events/(event)/item_meta_properties/(id)/": {
        "description": "Update an item meta property. You can also use PUT instead of PATCH. With PUT, you have to provide all fields of the resource, other fields will be reset to default. With PATCH, you only need to provide the fields that you want to change.\nYou can change all fields of the resource except the id field.",
        "name_test": "def test_meta_property_patch()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer"
          },
          {
            "name": "event",
            "description": "The slug field of the event"
          },
          {
            "name": "id",
            "description": "The id field of the item meta property to modify"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "400 Bad Request",
            "description": "The property could not be modified due to invalid submitted data"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer does not exist or you have no permission to change this resource."
          }
        ]
      },
      "DELETE /api/v1/organizers/(organizer)/events/(event)/item_meta_properties/(id)/": {
        "description": "Delete an item meta property.",
        "name_test": "def test_meta_property_delete()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer"
          },
          {
            "name": "event",
            "description": "The slug field of the event"
          },
          {
            "name": "id",
            "description": "The id field of the item meta property to delete"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "204 No Content",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer does not exist or you have no permission to delete this resource."
          }
        ]
      }
    }
  },
  "Teams": {
    "description": "-",
    "fields": {
      "name": {
        "type": "string",
        "description": "Team name"
      },
      "all_events": {
        "type": "boolean",
        "description": "Whether this team has access to all events"
      },
      "limit_events": {
        "type": "list",
        "description": "List of event slugs this team has access to"
      },
      "require_2fa": {
        "type": "boolean",
        "description": "Whether members of this team are required to use two-factor authentication"
      },
      "can_create_events": {
        "type": "boolean",
        "description": ""
      },
      "can_change_teams": {
        "type": "boolean",
        "description": ""
      },
      "can_change_organizer_settings": {
        "type": "boolean",
        "description": ""
      },
      "can_manage_customers": {
        "type": "boolean",
        "description": ""
      },
      "can_manage_reusable_media": {
        "type": "boolean",
        "description": ""
      },
      "can_manage_gift_cards": {
        "type": "boolean",
        "description": ""
      },
      "can_change_event_settings": {
        "type": "boolean",
        "description": ""
      },
      "can_change_items": {
        "type": "boolean",
        "description": ""
      },
      "can_view_orders": {
        "type": "boolean",
        "description": ""
      },
      "can_change_orders": {
        "type": "boolean",
        "description": ""
      },
      "can_view_vouchers": {
        "type": "boolean",
        "description": ""
      },
      "can_change_vouchers": {
        "type": "boolean",
        "description": ""
      },
      "can_checkin_orders": {
        "type": "boolean",
        "description": ""
      }
    },
    "endpoints": {
      "GET /api/v1/organizers/(organizer)/teams/": {
        "description": "Returns a list of all teams within a given organizer.",
        "name_test": "def test_team_list()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to fetch"
          }
        ],
        "query_parameters": [
          {
            "name": "page (integer)",
            "description": "The page number in case of a multi-page result set, default is 1"
          }
        ],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer does not exist or you have no permission to view this resource."
          }
        ]
      },
      "GET /api/v1/organizers/(organizer)/teams/(id)/": {
        "description": "Returns information on one team, identified by its ID.",
        "name_test": "def test_team_detail()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to fetch"
          },
          {
            "name": "id",
            "description": "The id field of the team to fetch"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer does not exist or you have no permission to view this resource."
          }
        ]
      },
      "POST /api/v1/organizers/(organizer)/teams/": {
        "description": "Creates a new team",
        "name_test": "def test_team_create()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to create a team for"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "201 Created",
            "description": "no error"
          },
          {
            "name": "400 Bad Request",
            "description": "The team could not be created due to invalid submitted data."
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer does not exist or you have no permission to create this resource."
          }
        ]
      },
      "PATCH /api/v1/organizers/(organizer)/teams/(id)/": {
        "description": "Update a team. You can also use PUT instead of PATCH. With PUT, you have to provide all fields of the resource, other fields will be reset to default. With PATCH, you only need to provide the fields that you want to change.",
        "name_test": "def test_team_update()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to modify"
          },
          {
            "name": "id",
            "description": "The id field of the team to modify"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "400 Bad Request",
            "description": "The team could not be modified due to invalid submitted data"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer does not exist or you have no permission to change this resource."
          }
        ]
      },
      "DELETE /api/v1/organizers/(organizer)/teams/(id)/": {
        "description": "Deletes a team.",
        "name_test": "def test_team_delete()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to modify"
          },
          {
            "name": "id",
            "description": "The id field of the team to delete"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "204 No Content",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer does not exist or you have no permission to change this resource."
          }
        ]
      }
    }
  },
  "Team Member": {
    "description": "-",
    "fields": {
      "email": {
        "type": "string",
        "description": "The user’s email address"
      },
      "fullname": {
        "type": "string",
        "description": "The user’s full name (or null)"
      },
      "require_2fa": {
        "type": "boolean",
        "description": "Whether this user uses two-factor-authentication"
      }
    },
    "endpoints": {
      "GET /api/v1/organizers/(organizer)/teams/(team)/members/": {
        "description": "Returns a list of all members of a team.",
        "name_test": "def test_team_members_list()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to fetch"
          },
          {
            "name": "team",
            "description": "The id field of the team to fetch"
          }
        ],
        "query_parameters": [
          {
            "name": "page (integer)",
            "description": "The page number in case of a multi-page result set, default is 1"
          }
        ],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer does not exist or you have no permission to view this resource."
          },
          {
            "name": "404 Not Found",
            "description": "The requested team does not exist"
          }
        ]
      },
      "GET /api/v1/organizers/(organizer)/teams/(team)/members/(id)/": {
        "description": "Returns information on one team member, identified by their ID.",
        "name_test": "def test_team_members_detail()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to fetch"
          },
          {
            "name": "team",
            "description": "The id field of the team to fetch"
          },
          {
            "name": "id",
            "description": "The id field of the member to fetch"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer does not exist or you have no permission to view this resource."
          },
          {
            "name": "404 Not Found",
            "description": "The requested team or member does not exist"
          }
        ]
      },
      "DELETE /api/v1/organizers/(organizer)/teams/(team)/members/(id)/": {
        "description": "Removes a member from the team.",
        "name_test": "def test_team_members_delete()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to modify"
          },
          {
            "name": "team",
            "description": "The id field of the team to modify"
          },
          {
            "name": "id",
            "description": "The id field of the member to delete"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "204 No Content",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer does not exist or you have no permission to create this resource."
          },
          {
            "name": "404 Not Found",
            "description": "The requested team or member does not exist"
          }
        ]
      }
    }
  },
  "Team invite": {
    "description": "-",
    "fields": {
      "email": {
        "type": "string",
        "description": "The invitee’s email address"
      }
    },
    "endpoints": {
      "GET /api/v1/organizers/(organizer)/teams/(team)/invites/": {
        "description": "Returns a list of all invitations to a team.",
        "name_test": "def test_team_invites_list()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to fetch"
          },
          {
            "name": "team",
            "description": "The id field of the team to fetch"
          }
        ],
        "query_parameters": [
          {
            "name": "page (integer)",
            "description": "The page number in case of a multi-page result set, default is 1"
          }
        ],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer does not exist or you have no permission to view this resource."
          },
          {
            "name": "404 Not Found",
            "description": "The requested team does not exist"
          }
        ]
      },
      "GET /api/v1/organizers/(organizer)/teams/(team)/invites/(id)/": {
        "description": "Returns information on one invite, identified by its ID.",
        "name_test": "def test_team_invites_detail()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to fetch"
          },
          {
            "name": "team",
            "description": "The id field of the team to fetch"
          },
          {
            "name": "id",
            "description": "The id field of the invite to fetch"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer does not exist or you have no permission to view this resource."
          },
          {
            "name": "404 Not Found",
            "description": "The requested team or invite does not exist"
          }
        ]
      },
      "POST /api/v1/organizers/(organizer)/teams/(team)/invites/": {
        "description": "Invites someone into the team. Note that if the user already has a pretix account, you will receive a response without an id and instead of an invite being created, the user will be directly added to the team.",
        "name_test": "def test_team_invites_create()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to modify"
          },
          {
            "name": "team",
            "description": "The id field of the team to modify"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "204 No Content",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer does not exist or you have no permission to create this resource."
          },
          {
            "name": "404 Not Found",
            "description": "The requested team does not exist"
          }
        ]
      },
      "DELETE /api/v1/organizers/(organizer)/teams/(team)/invites/(id)/": {
        "description": "Revokes an invite.",
        "name_test": "def test_team_invites_delete()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to modify"
          },
          {
            "name": "team",
            "description": "The id field of the team to modify"
          },
          {
            "name": "id",
            "description": "The id field of the invite to delete"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "204 No Content",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer does not exist or you have no permission to create this resource."
          },
          {
            "name": "404 Not Found",
            "description": "The requested team or invite does not exist"
          }
        ]
      }
    }
  },
  "Team API token": {
    "description": "-",
    "fields": {
      "name": {
        "type": "string",
        "description": "Name of this API token"
      },
      "active": {
        "type": "boolean",
        "description": "Whether this API token is active (can never be set to true again once false)"
      },
      "token": {
        "type": "string",
        "description": "The actual API token. Will only be sent back during token creation."
      }
    },
    "endpoints": {
      "GET /api/v1/organizers/(organizer)/teams/(team)/tokens/": {
        "description": "Returns a list of all API tokens of a team.",
        "name_test": "def test_team_tokens_list()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to fetch"
          },
          {
            "name": "team",
            "description": "The id field of the team to fetch"
          }
        ],
        "query_parameters": [
          {
            "name": "page (integer)",
            "description": "The page number in case of a multi-page result set, default is 1"
          }
        ],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer does not exist or you have no permission to view this resource."
          },
          {
            "name": "404 Not Found",
            "description": "The requested team does not exist"
          }
        ]
      },
      "GET /api/v1/organizers/(organizer)/teams/(team)/tokens/(id)/": {
        "description": "Returns information on one token, identified by its ID.",
        "name_test": "def test_team_tokens_detail()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to fetch"
          },
          {
            "name": "team",
            "description": "The id field of the team to fetch"
          },
          {
            "name": "id",
            "description": "The id field of the token to fetch"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer does not exist or you have no permission to view this resource."
          },
          {
            "name": "404 Not Found",
            "description": "The requested team or token does not exist"
          }
        ]
      },
      "POST /api/v1/organizers/(organizer)/teams/(team)/tokens/": {
        "description": "Creates a new token.",
        "name_test": "def test_team_token_create()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to modify"
          },
          {
            "name": "team",
            "description": "The id field of the team to create a token for"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "204 No Content",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer does not exist or you have no permission to create this resource."
          },
          {
            "name": "404 Not Found",
            "description": "The requested team does not exist"
          }
        ]
      },
      "DELETE /api/v1/organizers/(organizer)/teams/(team)/tokens/(id)/": {
        "description": "Disables a token.",
        "name_test": "def test_team_tokens_delete()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to modify"
          },
          {
            "name": "team",
            "description": "The id field of the team to modify"
          },
          {
            "name": "id",
            "description": "The id field of the token to delete"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer does not exist or you have no permission to create this resource."
          },
          {
            "name": "404 Not Found",
            "description": "The requested team or token does not exist"
          }
        ]
      }
    }
  },
  "Customers": {
    "description": "-",
    "fields": {
      "external_identifier": {
        "type": "string",
        "description": "External ID of the customer (or null). This field can be changed for customers created manually or through the API, but is read-only for customers created through a SSO integration."
      },
      "email": {
        "type": "string",
        "description": "Customer email address"
      },
      "phone": {
        "type": "string",
        "description": "Customer phone number"
      },
      "name": {
        "type": "string",
        "description": "Name of this customer (or null)"
      },
      "name_parts": {
        "type": "object of strings",
        "description": "Decomposition of name (i.e. given name, family name)"
      },
      "is_active": {
        "type": "boolean",
        "description": "Whether this account is active"
      },
      "is_verified": {
        "type": "boolean",
        "description": "Whether the email address of this account has been verified"
      },
      "last_login": {
        "type": "datetime",
        "description": "Date and time of last login"
      },
      "date_joined": {
        "type": "datetime",
        "description": "Date and time of registration"
      },
      "locale": {
        "type": "string",
        "description": "Preferred language of the customer"
      },
      "last_modified": {
        "type": "datetime",
        "description": "Date and time of modification of the record"
      },
      "notes": {
        "type": "string",
        "description": "Internal notes and comments (or null)"
      },
      "password": {
        "type": "string",
        "description": "Can only be set during creation of a new customer, will not be included in any responses."
      }
    },
    "endpoints": {
      "GET /api/v1/organizers/(organizer)/customers/": {
        "description": "Returns a list of all customers registered with a given organizer.",
        "name_test": "def test_customer_list()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to fetch"
          }
        ],
        "query_parameters": [
          {
            "name": "page (integer)",
            "description": "The page number in case of a multi-page result set, default is 1"
          },
          {
            "name": "email (string)",
            "description": "Only fetch customers with this email address"
          }
        ],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer does not exist or you have no permission to view this resource."
          }
        ]
      },
      "GET /api/v1/organizers/(organizer)/customers/(identifier)/": {
        "description": "Returns information on one customer, identified by its identifier.",
        "name_test": "def test_customer_detail()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to fetch"
          },
          {
            "name": "identifier",
            "description": "The identifier field of the customer to fetch"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer does not exist or you have no permission to view this resource."
          }
        ]
      },
      "POST /api/v1/organizers/(organizer)/customers/": {
        "description": "Creates a new customer. In addition to the fields defined on the resource, you can pass the field send_email to control whether the system should send an account activation email with a password reset link (defaults to false).",
        "name_test": "def test_customer_create()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to create a customer for"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "201 Created",
            "description": "no error"
          },
          {
            "name": "400 Bad Request",
            "description": "The customer could not be created due to invalid submitted data."
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer does not exist or you have no permission to create this resource."
          }
        ]
      },
      "PATCH /api/v1/organizers/(organizer)/customers/(identifier)/": {
        "description": "Update a customer. You can also use PUT instead of PATCH. With PUT, you have to provide all fields of the resource, other fields will be reset to default. With PATCH, you only need to provide the fields that you want to change.\nYou can change all fields of the resource except the identifier, last_login, date_joined, name (which is auto-generated from name_parts), and last_modified fields.",
        "name_test": "def test_customer_patch()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to modify"
          },
          {
            "name": "identifier",
            "description": "The identifier field of the customer to modify"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "400 Bad Request",
            "description": "The customer could not be modified due to invalid submitted data"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer does not exist or you have no permission to change this resource."
          }
        ]
      },
      "POST /api/v1/organizers/(organizer)/customers/(identifier)/anonymize/": {
        "description": "Anonymize a customer. Deletes personal data and disconnects from existing orders.",
        "name_test": "def test_customer_anonymize()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to modify"
          },
          {
            "name": "identifier",
            "description": "The identifier field of the customer to modify"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "400 Bad Request",
            "description": "The customer could not be modified due to invalid submitted data"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer does not exist or you have no permission to change this resource."
          }
        ]
      }
    }
  },
  "Discounts": {
    "description": "Discounts provide a way to automatically reduce the price of a cart if it matches a given set of conditions. Discounts are available to everyone. If you want to give a discount just to specific persons, look at vouchers instead. If you are interested in the behind-the-scenes details of how discounts are calculated for a specific order, have a look at our algorithm documentation.",
    "fields": {
      "active": {
        "type": "boolean",
        "description": "The discount will be ignored if this is false"
      },
      "internal_name": {
        "type": "string",
        "description": "A name for the rule used in the backend"
      },
      "position": {
        "type": "integer",
        "description": "An integer, used for sorting the rules which are applied in order"
      },
      "all_sales_channels": {
        "type": "boolean",
        "description": "If true (default), the discount is available on all sales channels that support discounts."
      },
      "limit_sales_channels": {
        "type": "list of strings",
        "description": "List of sales channel identifiers the discount is available on if all_sales_channels is false."
      },
      "sales_channels": {
        "type": "list of strings",
        "description": "DEPRECATED. Legacy interface, use all_sales_channels and limit_sales_channels instead."
      },
      "available_from": {
        "type": "datetime",
        "description": "The first date time at which this discount can be applied (or null)."
      },
      "available_until": {
        "type": "datetime",
        "description": "The last date time at which this discount can be applied (or null)."
      },
      "subevent_mode": {
        "type": "strings",
        "description": "Determines how the discount is handled when used in an event series. Can be \"mixed\" (no special effect), \"same\" (discount is only applied for groups within the same date), or \"distinct\" (discount is only applied for groups with no two same dates)."
      },
      "subevent_date_from": {
        "type": "datetime",
        "description": "The first date time of a subevent to which this discount can be applied (or null). Ignored in non-series events."
      },
      "subevent_date_until": {
        "type": "datetime",
        "description": "The last date time of a subevent to which this discount can be applied (or null). Ignored in non-series events."
      },
      "condition_all_products": {
        "type": "boolean",
        "description": "If true, the discount condition applies to all items."
      },
      "condition_limit_products": {
        "type": "list of integers",
        "description": "If condition_all_products is not set, this is a list of internal item IDs that the discount condition applies to."
      },
      "condition_apply_to_addons": {
        "type": "boolean",
        "description": "If true, the discount applies to add-on products as well, otherwise it only applies to top-level items. The discount never applies to bundled products."
      },
      "condition_ignore_voucher_discounted": {
        "type": "boolean",
        "description": "If true, the discount does not apply to products which have been discounted by a voucher."
      },
      "condition_min_count": {
        "type": "integer",
        "description": "The minimum number of matching products for the discount to be activated."
      },
      "condition_min_value": {
        "type": "money (string)",
        "description": "The minimum value of matching products for the discount to be activated. Cannot be combined with condition_min_count, or with subevent_mode set to distinct."
      },
      "benefit_discount_matching_percent": {
        "type": "decimal (string)",
        "description": "The percentage of price reduction for matching products."
      },
      "benefit_only_apply_to_cheapest_n_matches": {
        "type": "integer",
        "description": "If set higher than 0, the discount will only be applied to the cheapest matches. Useful for a “3 for 2”-style discount. Cannot be combined with condition_min_value."
      },
      "benefit_same_products": {
        "type": "boolean",
        "description": "If true, the discount benefit applies to the same set of items as the condition (see above)."
      },
      "benefit_limit_products": {
        "type": "list of integers",
        "description": "If benefit_same_products is not set, this is a list of internal item IDs that the discount benefit applies to."
      },
      "benefit_apply_to_addons": {
        "type": "boolean",
        "description": "(Only used if benefit_same_products is false.) If true, the discount applies to add-on products as well, otherwise it only applies to top-level items. The discount never applies to bundled products."
      },
      "benefit_ignore_voucher_discounted": {
        "type": "boolean",
        "description": "(Only used if benefit_same_products is false.) If true, the discount does not apply to products which have been discounted by a voucher."
      }
    },
    "endpoints": {
      "GET /api/v1/organizers/(organizer)/events/(event)/discounts/": {
        "description": "Returns a list of all discounts within a given event.",
        "name_test": "def test_discount_list()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to fetch"
          },
          {
            "name": "event",
            "description": "The slug field of the event to fetch"
          }
        ],
        "query_parameters": [
          {
            "name": "page (integer)",
            "description": "The page number in case of a multi-page result set, default is 1"
          },
          {
            "name": "active (boolean)",
            "description": "If set to true or false, only discounts with this value for the field active will be returned."
          },
          {
            "name": "ordering (string)",
            "description": "Manually set the ordering of results. Valid fields to be used are id and position. Default: position"
          }
        ],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event does not exist or you have no permission to view this resource."
          }
        ]
      },
      "GET /api/v1/organizers/(organizer)/events/(event)/discounts/(id)/": {
        "description": "Returns information on one discount, identified by its ID.",
        "name_test": "def test_discount_detail()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to fetch"
          },
          {
            "name": "event",
            "description": "The slug field of the event to fetch"
          },
          {
            "name": "id",
            "description": "The id field of the discount to fetch"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event does not exist or you have no permission to view this resource."
          }
        ]
      },
      "POST /api/v1/organizers/(organizer)/events/(event)/discounts/": {
        "description": "Creates a new discount",
        "name_test": "def test_discount_create()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer of the event to create a discount for"
          },
          {
            "name": "event",
            "description": "The slug field of the event to create a discount for"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "201 Created",
            "description": "no error"
          },
          {
            "name": "400 Bad Request",
            "description": "The discount could not be created due to invalid submitted data."
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event does not exist or you have no permission to create this resource."
          }
        ]
      },
      "PATCH /api/v1/organizers/(organizer)/events/(event)/discounts/(id)/": {
        "description": "Update a discount. You can also use PUT instead of PATCH. With PUT, you have to provide all fields of the resource, other fields will be reset to default. With PATCH, you only need to provide the fields that you want to change.\nYou can change all fields of the resource except the id field.",
        "name_test": "def test_discount_update()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to modify"
          },
          {
            "name": "event",
            "description": "The slug field of the event to modify"
          },
          {
            "name": "id",
            "description": "The id field of the discount to modify"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "400 Bad Request",
            "description": "The discount could not be modified due to invalid submitted data"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event does not exist or you have no permission to change this resource."
          }
        ]
      },
      "DELETE /api/v1/organizers/(organizer)/events/(event)/discount/(id)/": {
        "description": "Delete a discount.",
        "name_test": "def test_discount_delete()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to modify"
          },
          {
            "name": "event",
            "description": "The slug field of the event to modify"
          },
          {
            "name": "id",
            "description": "The id field of the discount to delete"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "204 No Content",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event does not exist or you have no permission to delete this resource."
          }
        ]
      }
    }
  },
  "Devices": {
    "description": "-",
    "fields": {
      "unique_serial": {
        "type": "string",
        "description": "Unique identifier of this device"
      },
      "name": {
        "type": "string",
        "description": "Device name"
      },
      "all_events": {
        "type": "boolean",
        "description": "Whether this device has access to all events"
      },
      "limit_events": {
        "type": "list",
        "description": "List of event slugs this device has access to"
      },
      "hardware_brand": {
        "type": "string",
        "description": "Device hardware manufacturer (read-only)"
      },
      "hardware_model": {
        "type": "string",
        "description": "Device hardware model (read-only)"
      },
      "os_name": {
        "type": "string",
        "description": "Device operating system name (read-only)"
      },
      "os_version": {
        "type": "string",
        "description": "Device operating system version (read-only)"
      },
      "software_brand": {
        "type": "string",
        "description": "Device software product (read-only)"
      },
      "software_version": {
        "type": "string",
        "description": "Device software version (read-only)"
      },
      "created": {
        "type": "datetime",
        "description": "Creation time"
      },
      "initialized": {
        "type": "datetime",
        "description": "Time of initialization (or null)"
      },
      "initialization_token": {
        "type": "string",
        "description": "Token for initialization"
      },
      "revoked": {
        "type": "boolean",
        "description": "Whether this device no longer has access"
      },
      "security_profile": {
        "type": "string",
        "description": "The name of a supported security profile restricting API access"
      }
    },
    "endpoints": {
      "GET /api/v1/organizers/(organizer)/devices/": {
        "description": "Returns a list of all devices within a given organizer.",
        "name_test": "def test_device_list()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to fetch"
          }
        ],
        "query_parameters": [
          {
            "name": "page (integer)",
            "description": "The page number in case of a multi-page result set, default is 1"
          }
        ],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer does not exist or you have no permission to view this resource."
          }
        ]
      },
      "GET /api/v1/organizers/(organizer)/devices/(device_id)/": {
        "description": "Returns information on one device, identified by its ID.",
        "name_test": "def test_device_detail()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to fetch"
          },
          {
            "name": "device_id",
            "description": "The device_id field of the device to fetch"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer does not exist or you have no permission to view this resource."
          }
        ]
      },
      "POST /api/v1/organizers/(organizer)/devices/": {
        "description": "Creates a new device",
        "name_test": "def test_device_create()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to create a device for"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "201 Created",
            "description": "no error"
          },
          {
            "name": "400 Bad Request",
            "description": "The device could not be created due to invalid submitted data."
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer does not exist or you have no permission to create this resource."
          }
        ]
      },
      "PATCH /api/v1/organizers/(organizer)/devices/(device_id)/": {
        "description": "Update a device.",
        "name_test": "def test_device_update()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to modify"
          },
          {
            "name": "device_id",
            "description": "The device_id field of the device to modify"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "400 Bad Request",
            "description": "The device could not be modified due to invalid submitted data"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer does not exist or you have no permission to change this resource."
          }
        ]
      }
    }
  },
  "Memberships": {
    "description": "-",
    "fields": {
      "customer": {
        "type": "string",
        "description": "Identifier of the customer associated with this membership (can’t be changed)"
      },
      "testmode": {
        "type": "boolean",
        "description": "Whether this is a test membership"
      },
      "membership_type": {
        "type": "integer",
        "description": "Internal ID of the membership type"
      },
      "date_start": {
        "type": "datetime",
        "description": "Start of validity"
      },
      "date_end": {
        "type": "datetime",
        "description": "End of validity"
      },
      "attendee_name_parts": {
        "type": "object",
        "description": "JSON representation of components of an attendee name (configuration dependent)"
      }
    },
    "endpoints": {
      "GET /api/v1/organizers/(organizer)/memberships/": {
        "description": "Returns a list of all memberships within a given organizer.",
        "name_test": "def test_membership_list()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to fetch"
          }
        ],
        "query_parameters": [
          {
            "name": "page (integer)",
            "description": "The page number in case of a multi-page result set, default is 1"
          },
          {
            "name": "customer (string)",
            "description": "A customer identifier to filter for"
          },
          {
            "name": "membership_type (integer)",
            "description": "A membership type ID to filter for"
          },
          {
            "name": "testmode (boolean)",
            "description": "Filter for memberships that are (not) in test mode."
          }
        ],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer does not exist or you have no permission to view this resource."
          }
        ]
      },
      "GET /api/v1/organizers/(organizer)/memberships/(id)/": {
        "description": "Returns information on one membership, identified by its ID.",
        "name_test": "def test_membership_detail()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to fetch"
          },
          {
            "name": "id",
            "description": "The id field of the membership to fetch"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer does not exist or you have no permission to view this resource."
          }
        ]
      },
      "POST /api/v1/organizers/(organizer)/memberships/": {
        "description": "Creates a new membership",
        "name_test": "def test_membership_create()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to create a membership for"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "201 Created",
            "description": "no error"
          },
          {
            "name": "400 Bad Request",
            "description": "The membership could not be created due to invalid submitted data."
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer does not exist or you have no permission to create this resource."
          }
        ]
      },
      "PATCH /api/v1/organizers/(organizer)/memberships/(id)/": {
        "description": "Update a membership. You can also use PUT instead of PATCH. With PUT, you have to provide all fields of the resource, other fields will be reset to default. With PATCH, you only need to provide the fields that you want to change.\nYou can change all fields of the resource except the id, customer, and testmode fields.",
        "name_test": "def test_membership_patch()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to modify"
          },
          {
            "name": "id",
            "description": "The id field of the membership to modify"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "400 Bad Request",
            "description": "The membership could not be modified due to invalid submitted data"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer does not exist or you have no permission to change this resource."
          }
        ]
      }
    }
  },
  "Membership types": {
    "description": "-",
    "fields": {
      "name": {
        "type": "multi-lingual string",
        "description": "Human-readable name of the type"
      },
      "transferable": {
        "type": "boolean",
        "description": "Whether a membership of this type can be used by multiple persons"
      },
      "allow_parallel_usage": {
        "type": "boolean",
        "description": "Whether a membership of this type can be used for multiple parallel tickets"
      },
      "max_usages": {
        "type": "integer",
        "description": "Maximum number of times a membership of this type can be used."
      }
    },
    "endpoints": {
      "GET /api/v1/organizers/(organizer)/membershiptypes/": {
        "description": "Returns a list of all membership types within a given organizer.",
        "name_test": "def test_membershiptype_list()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to fetch"
          }
        ],
        "query_parameters": [
          {
            "name": "page (integer)",
            "description": "The page number in case of a multi-page result set, default is 1"
          }
        ],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer does not exist or you have no permission to view this resource."
          }
        ]
      },
      "GET /api/v1/organizers/(organizer)/membershiptypes/(id)/": {
        "description": "Returns information on one membership type, identified by its ID.",
        "name_test": "def test_membershiptype_detail()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to fetch"
          },
          {
            "name": "id",
            "description": "The id field of the membership type to fetch"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer does not exist or you have no permission to view this resource."
          }
        ]
      },
      "POST /api/v1/organizers/(organizer)/membershiptypes/": {
        "description": "Creates a new membership type",
        "name_test": "def test_membershiptype_create()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to create a membership type for"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "201 Created",
            "description": "no error"
          },
          {
            "name": "400 Bad Request",
            "description": "The membership type could not be created due to invalid submitted data."
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer does not exist or you have no permission to create this resource."
          }
        ]
      },
      "PATCH /api/v1/organizers/(organizer)/membershiptypes/(id)/": {
        "description": "Update a membership type. You can also use PUT instead of PATCH. With PUT, you have to provide all fields of the resource, other fields will be reset to default. With PATCH, you only need to provide the fields that you want to change. You can change all fields of the resource except the id field.",
        "name_test": "def test_membershiptype_patch()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to modify"
          },
          {
            "name": "id",
            "description": "The id field of the membership type to modify"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "400 Bad Request",
            "description": "The membership could not be modified due to invalid submitted data"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer does not exist or you have no permission to change this resource."
          }
        ]
      },
      "DELETE /api/v1/organizers/(organizer)/membershiptypes/(id)/": {
        "description": "Delete a membership type. You can not delete types which have already been used.",
        "name_test": "def test_membershiptype_delete()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to modify"
          },
          {
            "name": "id",
            "description": "The id field of the type to delete"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "204 No Content",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer does not exist or you have no permission to delete this resource or the membership type is currently in use."
          }
        ]
      }
    }
  },
  "Sales channels": {
    "description": "-",
    "fields": {
      "label": {
        "type": "multi-lingual string",
        "description": "Human-readable name of the sales channel"
      },
      "type": {
        "type": "string",
        "description": "Type of the sales channel. Only channels with type api can currently be created through the API."
      },
      "position": {
        "type": "integer",
        "description": "Position for sorting lists of sales channels"
      }
    },
    "endpoints": {
      "GET /api/v1/organizers/(organizer)/saleschannels/": {
        "description": "Returns a list of all sales channels within a given organizer.",
        "name_test": "def test_channel_list()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to fetch"
          }
        ],
        "query_parameters": [
          {
            "name": "page (integer)",
            "description": "The page number in case of a multi-page result set, default is 1"
          }
        ],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer does not exist or you have no permission to view this resource."
          }
        ]
      },
      "GET /api/v1/organizers/(organizer)/saleschannels/(identifier)/": {
        "description": "Returns information on one sales channel, identified by its identifier.",
        "name_test": "def test_channel_detail()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to fetch"
          },
          {
            "name": "identifier",
            "description": "The identifier field of the sales channel to fetch"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer does not exist or you have no permission to view this resource."
          }
        ]
      },
      "POST /api/v1/organizers/(organizer)/saleschannels/": {
        "description": "Creates a sales channel",
        "name_test": "def test_channel_create()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to create a sales channel for"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "201 Created",
            "description": "no error"
          },
          {
            "name": "400 Bad Request",
            "description": "The sales channel could not be created due to invalid submitted data."
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer does not exist or you have no permission to create this resource."
          }
        ]
      },
      "PATCH /api/v1/organizers/(organizer)/saleschannels/(identifier)/": {
        "description": "Update a sales channel. You can also use PUT instead of PATCH. With PUT, you have to provide all fields of the resource, other fields will be reset to default. With PATCH, you only need to provide the fields that you want to change.\nYou can change all fields of the resource except the identifier and type fields.",
        "name_test": "def test_channel_patch()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to modify"
          },
          {
            "name": "identifier",
            "description": "The identifier field of the sales channel to modify"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "400 Bad Request",
            "description": "The sales channel could not be modified due to invalid submitted data"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer does not exist or you have no permission to change this resource."
          }
        ]
      },
      "DELETE /api/v1/organizers/(organizer)/saleschannels/(identifier)/": {
        "description": "Delete a sales channel. You can not delete sales channels which have already been used or which are integral parts of the system.",
        "name_test": "def test_channel_delete()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to modify"
          },
          {
            "name": "identifier",
            "description": "The identifier field of the sales channel to delete"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "204 No Content",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer does not exist or you have no permission to delete this resource or the sales channel is currently in use."
          }
        ]
      }
    }
  },
  "Seating plans": {
    "description": "-",
    "fields": {
      "name": {
        "type": "string",
        "description": "Human-readable name of the plan"
      },
      "layout": {
        "type": "object",
        "description": "JSON representation of the seating plan. These representations follow a JSON schema that currently still evolves. The version in use can be found here."
      }
    },
    "endpoints": {
      "GET /api/v1/organizers/(organizer)/seatingplans/": {
        "description": "Returns a list of all seating plans within a given organizer.",
        "name_test": "def test_plan_list()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to fetch"
          }
        ],
        "query_parameters": [
          {
            "name": "page (integer)",
            "description": "The page number in case of a multi-page result set, default is 1"
          }
        ],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer does not exist or you have no permission to view this resource."
          }
        ]
      },
      "GET /api/v1/organizers/(organizer)/seatingplans/(id)/": {
        "description": "Returns information on one plan, identified by its ID.",
        "name_test": "def test_plan_detail()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to fetch"
          },
          {
            "name": "id",
            "description": "The id field of the seating plan to fetch"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer does not exist or you have no permission to view this resource."
          }
        ]
      },
      "POST /api/v1/organizers/(organizer)/seatingplans/": {
        "description": "Creates a new seating plan",
        "name_test": "def test_plan_create()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to create a seating plan for"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "201 Created",
            "description": "no error"
          },
          {
            "name": "400 Bad Request",
            "description": "The seating plan could not be created due to invalid submitted data."
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer does not exist or you have no permission to create this resource."
          }
        ]
      },
      "PATCH /api/v1/organizers/(organizer)/seatingplans/(id)/": {
        "description": "Update a plan. You can also use PUT instead of PATCH. With PUT, you have to provide all fields of the resource, other fields will be reset to default. With PATCH, you only need to provide the fields that you want to change.\nYou can change all fields of the resource except the id field. You can not change a plan while it is in use for any events.",
        "name_test": "def test_plan_patch()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to modify"
          },
          {
            "name": "id",
            "description": "The id field of the plan to modify"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "400 Bad Request",
            "description": "The plan could not be modified due to invalid submitted data"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer does not exist or you have no permission to change this resource or the plan is currently in use."
          }
        ]
      },
      "DELETE /api/v1/organizers/(organizer)/seatingplans/(id)/": {
        "description": "Delete a plan. You can not delete plans which are currently in use by any events.",
        "name_test": "def test_plan_delete()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to modify"
          },
          {
            "name": "id",
            "description": "The id field of the plan to delete"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "204 No Content",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer does not exist or you have no permission to delete this resource or the plan is currently in use."
          }
        ]
      }
    }
  },
  "Gift cards": {
    "description": "-",
    "fields": {
      "secret": {
        "type": "string",
        "description": "Gift card code (can not be modified later)"
      },
      "value": {
        "type": "money (string)",
        "description": "Current gift card value"
      },
      "currency": {
        "type": "string",
        "description": "Currency of the value (can not be modified later)"
      },
      "testmode": {
        "type": "boolean",
        "description": "Whether this is a test gift card"
      },
      "expires": {
        "type": "datetime",
        "description": "Expiry date (or null)"
      },
      "conditions": {
        "type": "string",
        "description": "Special terms and conditions for this card (or null)"
      },
      "owner_ticket": {
        "type": "integer",
        "description": "Internal ID of an order position that is the “owner” of this gift card and can view all transactions. When setting this field, you can also give the secret of an order position."
      },
      "issuer": {
        "type": "string",
        "description": "Organizer slug of the organizer who created this gift card and is responsible for it."
      }
    },
    "endpoints": {
      "GET /api/v1/organizers/(organizer)/giftcards/": {
        "description": "Returns a list of all gift cards issued by a given organizer.",
        "name_test": "def test_giftcard_list()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to fetch"
          }
        ],
        "query_parameters": [
          {
            "name": "page (integer)",
            "description": "The page number in case of a multi-page result set, default is 1"
          },
          {
            "name": "secret (string)",
            "description": "Only show gift cards with the given secret."
          },
          {
            "name": "value (string)",
            "description": "Only show gift cards with the given value."
          },
          {
            "name": "expired (boolean)",
            "description": "Filter for gift cards that are (not) expired."
          },
          {
            "name": "testmode (boolean)",
            "description": "Filter for gift cards that are (not) in test mode."
          },
          {
            "name": "include_accepted (boolean)",
            "description": "Also show gift cards issued by other organizers that are accepted by this organizer."
          },
          {
            "name": "expand (string)",
            "description": "If you pass \"owner_ticket\", the respective field will be shown as a nested value instead of just an ID. The nested objects are identical to the respective resources, except that the owner_ticket will have an attribute of the format \"order\": {\"code\": \"ABCDE\", \"event\": \"eventslug\"} to make matching easier. The parameter can be given multiple times."
          }
        ],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer does not exist or you have no permission to view this resource."
          }
        ]
      },
      "GET /api/v1/organizers/(organizer)/giftcards/(id)/": {
        "description": "Returns information on one gift card, identified by its ID.",
        "name_test": "def test_giftcard_detail()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to fetch"
          },
          {
            "name": "id",
            "description": "The id field of the gift card to fetch"
          }
        ],
        "query_parameters": [
          {
            "name": "include_accepted (boolean)",
            "description": "Also show gift cards issued by other organizers that are accepted by this organizer."
          }
        ],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer does not exist or you have no permission to view this resource."
          }
        ]
      },
      "POST /api/v1/organizers/(organizer)/giftcards/": {
        "description": "Creates a new gift card",
        "name_test": "def test_giftcard_create()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to create a gift card for"
          }
        ],
        "query_parameters": [
          {
            "name": "expand (string)",
            "description": "If you pass \"owner_ticket\", the respective field will be shown as a nested value instead of just an ID. The nested objects are identical to the respective resources, except that the owner_ticket will have an attribute of the format \"order\": {\"code\": \"ABCDE\", \"event\": \"eventslug\"} to make matching easier. The parameter can be given multiple times."
          }
        ],
        "status_codes": [
          {
            "name": "201 Created",
            "description": "no error"
          },
          {
            "name": "400 Bad Request",
            "description": "The gift card could not be created due to invalid submitted data."
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer does not exist or you have no permission to create this resource."
          }
        ]
      },
      "PATCH /api/v1/organizers/(organizer)/giftcards/(id)/": {
        "description": "Update a gift card. You can also use PUT instead of PATCH. With PUT, you have to provide all fields of the resource, other fields will be reset to default. With PATCH, you only need to provide the fields that you want to change.\nYou can change all fields of the resource except the id, secret, testmode, and currency fields. Be careful when modifying the value field to avoid race conditions. We recommend to use the transact method described below.",
        "name_test": "def test_giftcard_patch_owner_by_id()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to modify"
          },
          {
            "name": "id",
            "description": "The id field of the gift card to modify"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "400 Bad Request",
            "description": "The gift card could not be modified due to invalid submitted data"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer does not exist or you have no permission to change this resource."
          }
        ]
      }
    }
  },
  "Gift card transaction": {
    "description": "-",
    "fields": {
      "datetime": {
        "type": "datetime",
        "description": "Creation date of the transaction"
      },
      "value": {
        "type": "money (string)",
        "description": "Transaction amount"
      },
      "event": {
        "type": "string",
        "description": "Event slug, if the gift card was used in the web shop (or null)"
      },
      "order": {
        "type": "string",
        "description": "Order code, if the gift card was used in the web shop (or null)"
      },
      "text": {
        "type": "string",
        "description": "Custom text of the transaction (or null)"
      },
      "info": {
        "type": "object",
        "description": "Additional data about the transaction (or null)"
      },
      "acceptor": {
        "type": "string",
        "description": "Organizer slug of the organizer who created this transaction (can be null for all transactions performed before this field was added.)"
      }
    },
    "endpoints": {
      "POST /api/v1/organizers/(organizer)/giftcards/(id)/transact/": {
        "description": "Atomically change the value of a gift card. A positive amount will increase the value of the gift card, a negative amount will decrease it.",
        "name_test": "def test_giftcard_transact()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to modify"
          },
          {
            "name": "id",
            "description": "The id field of the gift card to modify"
          }
        ],
        "query_parameters": [
          {
            "name": "include_accepted (boolean)",
            "description": "Also show gift cards issued by other organizers that are accepted by this organizer."
          }
        ],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "400 Bad Request",
            "description": "The gift card could not be modified due to invalid submitted data"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer does not exist or you have no permission to change this resource."
          },
          {
            "name": "409 Conflict",
            "description": "There is not sufficient credit on the gift card."
          }
        ]
      },
      "GET /api/v1/organizers/(organizer)/giftcards/(id)/transactions/": {
        "description": "List all transactions of a gift card.",
        "name_test": "def test_giftcard_transactions()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to view"
          },
          {
            "name": "id",
            "description": "The id field of the gift card to view"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer does not exist or you have no permission to view this resource."
          }
        ]
      }
    }
  },
  "Scheduled email rules": {
    "description": "Scheduled email rules that specify emails that the system will send automatically at a specific point in time, e.g. the day of the event.",
    "fields": {
      "enabled": {
        "type": "boolean",
        "description": "If false, the rule is ignored"
      },
      "subject": {
        "type": "multi-lingual string",
        "description": "The subject of the email"
      },
      "template": {
        "type": "multi-lingual string",
        "description": "The body of the email"
      },
      "all_products": {
        "type": "boolean",
        "description": "If true, the email is sent to buyers of all products"
      },
      "limit_products": {
        "type": "list of integers",
        "description": "List of product IDs, if all_products is not set"
      },
      "[DEPRECATED] include_pending": {
        "type": "boolean",
        "description": "If true, the email is sent to pending orders. If false, only paid orders are considered."
      },
      "restrict_to_status": {
        "type": "list",
        "description": "List of order states to restrict recipients to. Valid entries are p for paid, e for expired, c for canceled, n__pending_approval for pending approval, n__not_pending_approval_and_not_valid_if_pending for payment pending, n__valid_if_pending for payment pending but already confirmed, and n__pending_overdue for pending with payment overdue. The default is [\"p\", \"n__valid_if_pending\"]."
      },
      "checked_in_status": {
        "type": "string",
        "description": "Check-in status to restrict recipients to. Valid strings are: null for no filtering (default), checked_in for limiting to attendees that are or have been checked in, and no_checkin for limiting to attendees who have not checked in."
      },
      "date_is_absolute": {
        "type": "boolean",
        "description": "If true, the email is set at a specific point in time."
      },
      "send_date": {
        "type": "datetime",
        "description": "If date_is_absolute is set: Date and time to send the email."
      },
      "send_offset_days": {
        "type": "integer",
        "description": "If date_is_absolute is not set, this is the number of days before/after the email is sent."
      },
      "send_offset_time": {
        "type": "time",
        "description": "If date_is_absolute is not set, this is the time of day the email is sent on the day specified by send_offset_days."
      },
      "offset_to_event_end": {
        "type": "boolean",
        "description": "If true, send_offset_days is relative to the event end date. Otherwise it is relative to the event start date."
      },
      "offset_is_after": {
        "type": "boolean",
        "description": "If true, send_offset_days is the number of days after the event start or end date. Otherwise it is the number of days before."
      },
      "send_to": {
        "type": "string",
        "description": "Can be \"orders\" if the email should be sent to customers (one email per order), \"attendees\" if the email should be sent to every attendee, or \"both\". date. Otherwise it is relative to the event start date."
      }
    },
    "endpoints": {
      "GET /api/v1/organizers/(organizer)/events/(event)/sendmail_rules/": {
        "description": "Returns a list of all rules configured for an event.",
        "name_test": "def test_sendmail_rule_list()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of a valid organizer"
          },
          {
            "name": "event",
            "description": "The slug field of the event to fetch"
          }
        ],
        "query_parameters": [
          {
            "name": "page",
            "description": "The page number in case of a multi-page result set, default is 1"
          }
        ],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer does not exist or you have no permission to view it."
          }
        ]
      },
      "GET /api/v1/organizers/(organizer)/events/(event)/sendmail_rules/(id)/": {
        "description": "Returns information on one rule, identified by its ID.",
        "name_test": "def test_sendmail_rule_detail()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to fetch"
          },
          {
            "name": "event",
            "description": "The slug field of the event to fetch"
          },
          {
            "name": "id",
            "description": "The id field of the rule to fetch"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event/rule does not exist or you have no permission to view it."
          }
        ]
      },
      "POST /api/v1/organizers/(organizer)/events/(event)/sendmail_rules/": {
        "description": "Create a new rule.",
        "name_test": "def create_rule()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to create a rule for"
          },
          {
            "name": "event",
            "description": "The slug field of the event to create a rule for"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "201 Created",
            "description": "no error"
          },
          {
            "name": "400 Bad Request",
            "description": "The rule could not be created due to invalid submitted data."
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event does not exist or you have no permission to create rules."
          }
        ]
      },
      "PATCH /api/v1/organizers/(organizer)/events/(event)/sendmail_rules/(id)/": {
        "description": "Update a rule. You can also use PUT instead of PATCH. With PUT, you have to provide all fields of the resource, other fields will be reset to default. With PATCH, you only need to provide the fields that you want to change.",
        "name_test": "def test_sendmail_rule_change()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to modify"
          },
          {
            "name": "event",
            "description": "The slug field of the event to modify"
          },
          {
            "name": "id",
            "description": "The id field of the rule to modify"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "400 Bad Request",
            "description": "The rule could not be modified due to invalid submitted data."
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event/rule does not exist or you have no permission to change it."
          }
        ]
      },
      "DELETE /api/v1/organizers/(organizer)/events/(event)/sendmail_rules/(id)/": {
        "description": "Delete a rule.",
        "name_test": "def test_sendmail_rule_delete()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to modify"
          },
          {
            "name": "event",
            "description": "The slug field of the event to modify"
          },
          {
            "name": "id",
            "description": "The id field of the rule to delete"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "204 No Content",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event/rule does not exist or you have no permission to change it or this rule cannot be deleted since it is currently in use."
          }
        ]
      }
    }
  },
  "Webhooks": {
    "description": "-",
    "fields": {
      "enabled": {
        "type": "boolean",
        "description": "If false, this webhook will not receive any notifications"
      },
      "target_url": {
        "type": "string",
        "description": "The URL to call"
      },
      "all_events": {
        "type": "boolean",
        "description": "If true, this webhook will receive notifications on all events of this organizer"
      },
      "limit_events": {
        "type": "list of strings",
        "description": "If all_events is false, this is a list of event slugs this webhook is active for"
      },
      "action_types": {
        "type": "list of strings",
        "description": "A list of action type filters that limit the notifications sent to this webhook. See below for valid values"
      },
      "comment": {
        "type": "string",
        "description": "Internal comment on this webhook, default null"
      }
    },
    "endpoints": {
      "GET /api/v1/organizers/(organizer)/webhooks/": {
        "description": "Returns a list of all webhooks within a given organizer.",
        "name_test": "def test_hook_list()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to fetch"
          }
        ],
        "query_parameters": [
          {
            "name": "page (integer)",
            "description": "The page number in case of a multi-page result set, default is 1"
          },
          {
            "name": "enabled (boolean)",
            "description": "Only show webhooks that are or are not enabled"
          }
        ],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer does not exist or you have no permission to view this resource."
          }
        ]
      },
      "GET /api/v1/organizers/(organizer)/webhooks/(id)/": {
        "description": "Returns information on one webhook, identified by its ID.",
        "name_test": "def test_hook_detail()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to fetch"
          },
          {
            "name": "id",
            "description": "The id field of the webhook to fetch"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer does not exist or you have no permission to view this resource."
          }
        ]
      },
      "POST /api/v1/organizers/(organizer)/webhooks/": {
        "description": "Creates a new webhook",
        "name_test": "def test_hook_create()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to create a webhook for"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "201 Created",
            "description": "no error"
          },
          {
            "name": "400 Bad Request",
            "description": "The webhook could not be created due to invalid submitted data."
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer does not exist or you have no permission to create this resource."
          }
        ]
      },
      "PATCH /api/v1/organizers/(organizer)/webhooks/(id)/": {
        "description": "Update a webhook. You can also use PUT instead of PATCH. With PUT, you have to provide all fields of the resource, other fields will be reset to default. With PATCH, you only need to provide the fields that you want to change.\nYou can change all fields of the resource except the id field.",
        "name_test": "def test_hook_delete()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to modify"
          },
          {
            "name": "id",
            "description": "The id field of the webhook to modify"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "400 Bad Request",
            "description": "The webhook could not be modified due to invalid submitted data"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer does not exist or you have no permission to change this resource."
          }
        ]
      },
      "DELETE /api/v1/organizers/(organizer)/webhook/(id)/": {
        "description": "Delete a webhook. Currently, this will not delete but just disable the webhook.",
        "name_test": "def test_hook_delete()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to modify"
          },
          {
            "name": "id",
            "description": "The id field of the webhook to delete"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "204 No Content",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer does not exist or you have no permission to delete this resource."
          }
        ]
      }
    }
  },
  "Reusable media": {
    "description": "Reusable media represent things, typically physical tokens like plastic cards or NFC wristbands, which can represent other entities inside the system. For example, a medium can link to an order position or to a gift card and can be used in their place. Later, the medium might be reused for a different ticket.",
    "fields": {
      "type": {
        "type": "string",
        "description": "Type of medium, e.g. \"barcode\", \"nfc_uid\" or \"nfc_mf0aes\"."
      },
      "organizer": {
        "type": "string",
        "description": "Organizer slug of the organizer who “owns” this medium."
      },
      "identifier": {
        "type": "string",
        "description": "Unique identifier of the medium. The format depends on the type."
      },
      "active": {
        "type": "boolean",
        "description": "Whether this medium may be used."
      },
      "created": {
        "type": "datetime",
        "description": "Date of creation"
      },
      "updated": {
        "type": "datetime",
        "description": "Date of last modification"
      },
      "expires": {
        "type": "datetime",
        "description": "Expiry date (or null)"
      },
      "customer": {
        "type": "string",
        "description": "Identifier of a customer account this medium belongs to."
      },
      "linked_orderposition": {
        "type": "integer",
        "description": "Internal ID of a ticket this medium is linked to."
      },
      "linked_giftcard": {
        "type": "integer",
        "description": "Internal ID of a gift card this medium is linked to."
      },
      "info": {
        "type": "object",
        "description": "Additional data, content depends on the type. Consider this internal to the system and don’t use it for your own data."
      },
      "notes": {
        "type": "string",
        "description": "Internal notes and comments (or null)"
      }
    },
    "endpoints": {
      "GET /api/v1/organizers/(organizer)/reusablemedia/": {
        "description": "Returns a list of all media issued by a given organizer.",
        "name_test": "def test_medium_list()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to fetch"
          }
        ],
        "query_parameters": [
          {
            "name": "page (integer)",
            "description": "The page number in case of a multi-page result set, default is 1."
          },
          {
            "name": "identifier (string)",
            "description": "Only show media with the given identifier. Note that you should use the lookup endpoint described below for most use cases."
          },
          {
            "name": "type (string)",
            "description": "Only show media with the given type."
          },
          {
            "name": "active (boolean)",
            "description": "Only show media that are (not) active."
          },
          {
            "name": "customer (string)",
            "description": "Only show media linked to the given customer."
          },
          {
            "name": "created_since (string)",
            "description": "Only show media created since a given date."
          },
          {
            "name": "updated_since (string)",
            "description": "Only show media updated since a given date."
          },
          {
            "name": "linked_orderposition (integer)",
            "description": "Only show media linked to the given ticket."
          },
          {
            "name": "linked_giftcard (integer)",
            "description": "Only show media linked to the given gift card."
          },
          {
            "name": "expand (string)",
            "description": "If you pass \"linked_giftcard\", \"linked_giftcard.owner_ticket\", \"linked_orderposition\", or \"customer\", the respective field will be shown as a nested value instead of just an ID. The nested objects are identical to the respective resources, except that order positions will have an attribute of the format \"order\": {\"code\": \"ABCDE\", \"event\": \"eventslug\"} to make matching easier. The parameter can be given multiple times."
          }
        ],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer does not exist or you have no permission to view this resource."
          }
        ]
      },
      "GET /api/v1/organizers/(organizer)/reusablemedia/(id)/": {
        "description": "Returns information on one medium, identified by its ID.",
        "name_test": "def test_medium_detail()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to fetch"
          },
          {
            "name": "id",
            "description": "The id field of the medium to fetch"
          }
        ],
        "query_parameters": [
          {
            "name": "expand (string)",
            "description": "If you pass \"linked_giftcard\", \"linked_giftcard.owner_ticket\", \"linked_orderposition\", or \"customer\", the respective field will be shown as a nested value instead of just an ID. The nested objects are identical to the respective resources, except that order positions will have an attribute of the format \"order\": {\"code\": \"ABCDE\", \"event\": \"eventslug\"} to make matching easier. The parameter can be given multiple times."
          }
        ],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer does not exist or you have no permission to view this resource."
          }
        ]
      },
      "POST /api/v1/organizers/(organizer)/reusablemedia/lookup/": {
        "description": "Look up a new reusable medium by its identifier. In some cases, this might lead to the automatic creation of a new medium behind the scenes.\nThis endpoint, and this endpoint only, might return media from a different organizer if there is a cross-acceptance agreement. In this case, only linked gift cards will be returned, no order position or customer records,",
        "name_test": "def test_medium_lookup_ok()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to look up a medium for"
          }
        ],
        "query_parameters": [
          {
            "name": "expand (string)",
            "description": "If you pass \"linked_giftcard\", \"linked_orderposition\", oder \"customer\", the respective field will be shown as a nested value instead of just an ID. The nested objects are identical to the respective resources, except that the linked_orderposition will have an attribute of the format \"order\": {\"code\": \"ABCDE\", \"event\": \"eventslug\"} to make matching easier. The parameter can be given multiple times."
          }
        ],
        "status_codes": [
          {
            "name": "201 Created",
            "description": "no error"
          },
          {
            "name": "400 Bad Request",
            "description": "The medium could not be looked up due to invalid submitted data."
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer does not exist or you have no permission to create this resource."
          }
        ]
      },
      "POST /api/v1/organizers/(organizer)/reusablemedia/": {
        "description": "Creates a new reusable medium.",
        "name_test": "def test_medium_create()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to create a medium for"
          }
        ],
        "query_parameters": [
          {
            "name": "expand (string)",
            "description": "If you pass \"linked_giftcard\", \"linked_orderposition\", oder \"customer\", the respective field will be shown as a nested value instead of just an ID. The nested objects are identical to the respective resources, except that the linked_orderposition will have an attribute of the format \"order\": {\"code\": \"ABCDE\", \"event\": \"eventslug\"} to make matching easier. The parameter can be given multiple times."
          }
        ],
        "status_codes": [
          {
            "name": "201 Created",
            "description": "no error"
          },
          {
            "name": "400 Bad Request",
            "description": "The medium could not be created due to invalid submitted data."
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer does not exist or you have no permission to create this resource."
          }
        ]
      },
      "PATCH /api/v1/organizers/(organizer)/reusablemedia/(id)/": {
        "description": "Update a reusable medium. You can also use PUT instead of PATCH. With PUT, you have to provide all fields of the resource, other fields will be reset to default. With PATCH, you only need to provide the fields that you want to change.\nYou can change all fields of the resource except the id, identifier and type fields.",
        "name_test": "def test_medium_patch()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to modify"
          },
          {
            "name": "id",
            "description": "The id field of the medium to modify"
          }
        ],
        "query_parameters": [
          {
            "name": "expand (string)",
            "description": "If you pass \"linked_giftcard\", \"linked_orderposition\", oder \"customer\", the respective field will be shown as a nested value instead of just an ID. The nested objects are identical to the respective resources, except that the linked_orderposition will have an attribute of the format \"order\": {\"code\": \"ABCDE\", \"event\": \"eventslug\"} to make matching easier. The parameter can be given multiple times."
          }
        ],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "400 Bad Request",
            "description": "The medium could not be modified due to invalid submitted data"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer does not exist or you have no permission to change this resource."
          }
        ]
      }
    }
  },
  "Vouchers": {
    "description": "-",
    "fields": {
      "code": {
        "type": "string",
        "description": "The voucher code that is required to redeem the voucher"
      },
      "max_usages": {
        "type": "integer",
        "description": "The maximum number of times this voucher can be redeemed (default: 1)."
      },
      "redeemed": {
        "type": "integer",
        "description": "The number of times this voucher already has been redeemed."
      },
      "min_usages": {
        "type": "integer",
        "description": "The minimum number of times this voucher must be redeemed on first usage (default: 1)."
      },
      "valid_until": {
        "type": "datetime",
        "description": "The voucher expiration date (or null)."
      },
      "block_quota": {
        "type": "boolean",
        "description": "If true, quota is blocked for this voucher."
      },
      "allow_ignore_quota": {
        "type": "boolean",
        "description": "If true, this voucher can be redeemed even if a product is sold out and even if quota is not blocked for this voucher."
      },
      "price_mode": {
        "type": "string",
        "description": "Determines how this voucher affects product prices. Possible values: none – No effect on price, set – The product price is set to the given value, subtract – The product price is determined by the original price minus the given value, percent – The product price is determined by the original price reduced by the percentage given in value"
      },
      "value": {
        "type": "decimal (string)",
        "description": "The value (see price_mode)"
      },
      "item": {
        "type": "integer",
        "description": "An ID of an item this voucher is restricted to (or null)"
      },
      "variation": {
        "type": "integer",
        "description": "An ID of a variation this voucher is restricted to (or null)"
      },
      "quota": {
        "type": "integer",
        "description": "An ID of a quota this voucher is restricted to (or null). This is an exclusive alternative to item and variation: A voucher can be attached either to a specific product or to all products within one quota or it can be available for all items without restriction."
      },
      "seat": {
        "type": "string",
        "description": "seat_guid attribute of a specific seat (or null)"
      },
      "tag": {
        "type": "string",
        "description": "A string that is used for grouping vouchers"
      },
      "comment": {
        "type": "string",
        "description": "An internal comment on the voucher"
      },
      "subevent": {
        "type": "integer",
        "description": "ID of the date inside an event series this voucher belongs to (or null)."
      },
      "show_hidden_items": {
        "type": "boolean",
        "description": "Only if set to true, this voucher allows to buy products with the property hide_without_voucher. Defaults to true."
      },
      "all_addons_included": {
        "type": "boolean",
        "description": "If set to true, all add-on products for the product purchased with this voucher are included in the base price."
      },
      "all_bundles_included": {
        "type": "boolean",
        "description": "If set to true, all bundled products for the product purchased with this voucher are added without their designated price."
      }
    },
    "endpoints": {
      "GET /api/v1/organizers/(organizer)/events/(event)/vouchers/": {
        "description": "Returns a list of all vouchers within a given event.",
        "name_test": "def test_voucher_list()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to fetch"
          },
          {
            "name": "event",
            "description": "The slug field of the event to fetch"
          }
        ],
        "query_parameters": [
          {
            "name": "page (integer)",
            "description": "The page number in case of a multi-page result set, default is 1"
          },
          {
            "name": "code (string)",
            "description": "Only show the voucher with the given voucher code."
          },
          {
            "name": "max_usages (integer)",
            "description": "Only show vouchers with the given maximal number of usages."
          },
          {
            "name": "redeemed (integer)",
            "description": "Only show vouchers with the given number of redemptions. Note that this doesn’t tell you if the voucher can still be redeemed, as this also depends on max_usages. See the active query parameter as well."
          },
          {
            "name": "block_quota (boolean)",
            "description": "If set to true or false, only vouchers with this value in the field block_quota will be shown."
          },
          {
            "name": "allow_ignore_quota (boolean)",
            "description": "If set to true or false, only vouchers with this value in the field allow_ignore_quota will be shown."
          },
          {
            "name": "price_mode (string)",
            "description": "If set, only vouchers with this value in the field price_mode will be shown (see above)."
          },
          {
            "name": "value (string)",
            "description": "If set, only vouchers with this value in the field value will be shown."
          },
          {
            "name": "item (integer)",
            "description": "If set, only vouchers attached to the item with the given ID will be shown."
          },
          {
            "name": "variation (integer)",
            "description": "If set, only vouchers attached to the variation with the given ID will be shown."
          },
          {
            "name": "quota (integer)",
            "description": "If set, only vouchers attached to the quota with the given ID will be shown."
          },
          {
            "name": "tag (string)",
            "description": "If set, only vouchers with the given tag will be shown."
          },
          {
            "name": "subevent (integer)",
            "description": "Only return vouchers of the sub-event with the given ID"
          },
          {
            "name": "ordering (string)",
            "description": "Manually set the ordering of results. Valid fields to be used are id, code, max_usages, valid_until, and value. Default: id"
          }
        ],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event does not exist or you have no permission to view this resource."
          }
        ]
      },
      "GET /api/v1/organizers/(organizer)/events/(event)/vouchers/(id)/": {
        "description": "Returns information on one voucher, identified by its internal ID.",
        "name_test": "def test_voucher_detail()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to fetch"
          },
          {
            "name": "event",
            "description": "The slug field of the event to fetch"
          },
          {
            "name": "id",
            "description": "The id field of the voucher to fetch"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event does not exist or you have no permission to view this resource."
          }
        ]
      },
      "POST /api/v1/organizers/(organizer)/events/(event)/vouchers/": {
        "description": "Create a new voucher.",
        "name_test": "def create_voucher()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to create a voucher for"
          },
          {
            "name": "event",
            "description": "The slug field of the event to create a voucher for"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "201 Created",
            "description": "no error"
          },
          {
            "name": "400 Bad Request",
            "description": "The voucher could not be created due to invalid submitted data."
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event does not exist or you have no permission to create this resource."
          },
          {
            "name": "409 Conflict",
            "description": "The server was unable to acquire a lock and could not process your request. You can try again after a short waiting period."
          }
        ]
      },
      "POST /api/v1/organizers/(organizer)/events/(event)/vouchers/batch_create/": {
        "description": "Creates multiple new vouchers atomically.",
        "name_test": "def test_create_multiple_vouchers()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to create a vouchers for"
          },
          {
            "name": "event",
            "description": "The slug field of the event to create a vouchers for"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "201 Created",
            "description": "no error"
          },
          {
            "name": "400 Bad Request",
            "description": "The vouchers could not be created due to invalid submitted data."
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event does not exist or you have no permission to create this resource."
          },
          {
            "name": "409 Conflict",
            "description": "The server was unable to acquire a lock and could not process your request. You can try again after a short waiting period."
          }
        ]
      },
      "PATCH /api/v1/organizers/(organizer)/events/(event)/vouchers/(id)/": {
        "description": "Update a voucher. You can also use PUT instead of PATCH. With PUT, you have to provide all fields of the resource, other fields will be reset to default. With PATCH, you only need to provide the fields that you want to change.\nYou can change all fields of the resource except the id and redeemed fields.",
        "name_test": "def change_voucher()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to modify"
          },
          {
            "name": "event",
            "description": "The slug field of the event to modify"
          },
          {
            "name": "id",
            "description": "The id field of the voucher to modify"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "400 Bad Request",
            "description": "The voucher could not be modified due to invalid submitted data"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event does not exist or you have no permission to change this resource."
          },
          {
            "name": "409 Conflict",
            "description": "The server was unable to acquire a lock and could not process your request. You can try again after a short waiting period."
          }
        ]
      },
      "DELETE /api/v1/organizers/(organizer)/events/(event)/vouchers/(id)/": {
        "description": "Delete a voucher. Note that you cannot delete a voucher if it already has been redeemed.",
        "name_test": "def test_delete_voucher()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to modify"
          },
          {
            "name": "event",
            "description": "The slug field of the event to modify"
          },
          {
            "name": "id",
            "description": "The id field of the voucher to delete"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "204 No Content",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event does not exist or you have no permission to delete this resource."
          }
        ]
      }
    }
  },
  "Waiting list entries": {
    "description": "-",
    "fields": {
      "created": {
        "type": "datetime",
        "description": "Creation date of the waiting list entry"
      },
      "name": {
        "type": "string",
        "description": "Name of the user on the waiting list (or null)"
      },
      "name_parts": {
        "type": "object of strings",
        "description": "Decomposition of name of the user (or null)"
      },
      "email": {
        "type": "string",
        "description": "Email address of the user on the waiting list"
      },
      "phone": {
        "type": "string",
        "description": "Phone number of the user on the waiting list (or null)"
      },
      "voucher": {
        "type": "integer",
        "description": "Internal ID of the voucher sent to this user. If this field is set, the user has been sent a voucher and is no longer waiting. If it is null, the user is still waiting."
      },
      "item": {
        "type": "integer",
        "description": "An ID of an item the user is waiting to be available again"
      },
      "variation": {
        "type": "integer",
        "description": "An ID of a variation the user is waiting to be available again (or null)"
      },
      "locale": {
        "type": "string",
        "description": "Locale of the waiting user"
      },
      "subevent": {
        "type": "integer",
        "description": "ID of the date inside an event series this entry belongs to (or null)."
      }
    },
    "endpoints": {
      "GET /api/v1/organizers/(organizer)/events/(event)/waitinglistentries/": {
        "description": "Returns a list of all waiting list entries within a given event.",
        "name_test": "def test_wle_list()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to fetch"
          },
          {
            "name": "event",
            "description": "The slug field of the event to fetch"
          }
        ],
        "query_parameters": [
          {
            "name": "page (integer)",
            "description": "The page number in case of a multi-page result set, default is 1"
          },
          {
            "name": "email (string)",
            "description": "Only show waiting list entries created with the given email address."
          },
          {
            "name": "locale (string)",
            "description": "Only show waiting list entries created with the given locale."
          },
          {
            "name": "has_voucher (boolean)",
            "description": "If set to true or false, only waiting list entries are returned that have or have not been sent a voucher."
          },
          {
            "name": "item (integer)",
            "description": "If set, only entries of users waiting for the item with the given ID will be shown."
          },
          {
            "name": "variation (integer)",
            "description": "If set, only entries of users waiting for the variation with the given ID will be shown."
          },
          {
            "name": "subevent (integer)",
            "description": "Only return entries of the sub-event with the given ID"
          },
          {
            "name": "ordering (string)",
            "description": "Manually set the ordering of results. Valid fields to be used are id, created, email, item. Default: created"
          }
        ],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event does not exist or you have no permission to view this resource."
          }
        ]
      },
      "GET /api/v1/organizers/(organizer)/events/(event)/waitinglistentries/(id)/": {
        "description": "Returns information on one waiting list entry, identified by its internal ID.",
        "name_test": "def test_wle_detail()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to fetch"
          },
          {
            "name": "event",
            "description": "The slug field of the event to fetch"
          },
          {
            "name": "id",
            "description": "The id field of the waiting list entry to fetch"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event does not exist or you have no permission to view this resource."
          }
        ]
      },
      "POST /api/v1/organizers/(organizer)/events/(event)/waitinglistentries/": {
        "description": "Create a new entry.",
        "name_test": "def create_wle()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to create an entry for"
          },
          {
            "name": "event",
            "description": "The slug field of the event to create an entry for"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "201 Created",
            "description": "no error"
          },
          {
            "name": "400 Bad Request",
            "description": "The voucher could not be created due to invalid submitted data."
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event does not exist or you have no permission to create this resource or entries cannot be created for this item at this time."
          }
        ]
      },
      "PATCH /api/v1/organizers/(organizer)/events/(event)/waitinglistentries/(id)/": {
        "description": "Update an entry. You can also use PUT instead of PATCH. With PUT, you have to provide all fields of the resource, other fields will be reset to default. With PATCH, you only need to provide the fields that you want to change.\nYou can change all fields of the resource except the id, voucher and created fields. You can only change an entry as long as no voucher is set.",
        "name_test": "def change_wle()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to modify"
          },
          {
            "name": "event",
            "description": "The slug field of the event to modify"
          },
          {
            "name": "id",
            "description": "The id field of the entry to modify"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "400 Bad Request",
            "description": "The entry could not be modified due to invalid submitted data"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event does not exist or you have no permission to create this resource or entries cannot be created for this item at this time or this entry already has a voucher assigned"
          }
        ]
      },
      "POST /api/v1/organizers/(organizer)/events/(event)/waitinglistentries/(id)/send_voucher/": {
        "description": "Manually sends a voucher to someone on the waiting list",
        "name_test": "def test_wle_send_voucher()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to modify"
          },
          {
            "name": "event",
            "description": "The slug field of the event to modify"
          },
          {
            "name": "id",
            "description": "The id field of the entry to modify"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "204 No Content",
            "description": "no error"
          },
          {
            "name": "400 Bad Request",
            "description": "The voucher could not be sent out, see body for details (e.g. voucher has already been sent or item is not available)."
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event does not exist or you have no permission to do this"
          }
        ]
      },
      "DELETE /api/v1/organizers/(organizer)/events/(event)/waitinglistentries/(id)/": {
        "description": "Delete an entry. Note that you cannot delete an entry once it is assigned a voucher.",
        "name_test": "def test_delete_wle()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to modify"
          },
          {
            "name": "event",
            "description": "The slug field of the event to modify"
          },
          {
            "name": "id",
            "description": "The id field of the entry to delete"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "204 No Content",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event does not exist or you have no permission to delete this resource or this entry already has a voucher assigned."
          }
        ]
      }
    }
  },
  "Check-in lists": {
    "description": "You can create check-in lists that you can use e.g. at the entrance of your event to track who is coming and if they actually bought a ticket.\nYou can create multiple check-in lists to separate multiple parts of your event, for example if you have separate entries for multiple ticket types. Different check-in lists are completely independent: If a ticket shows up on two lists, it is valid once on every list. This might be useful if you run a festival with festival passes that allow access to every or multiple performances as well as tickets only valid for single performances.",
    "fields": {
      "name": {
        "type": "string",
        "description": "The internal name of the check-in list"
      },
      "all_products": {
        "type": "boolean",
        "description": "If true, the check-in lists contains tickets of all products in this event. The limit_products field is ignored in this case."
      },
      "limit_products": {
        "type": "list of integers",
        "description": "List of item IDs to include in this list."
      },
      "subevent": {
        "type": "integer",
        "description": "ID of the date inside an event series this list belongs to (or null)."
      },
      "position_count": {
        "type": "integer",
        "description": "Number of tickets that match this list (read-only)."
      },
      "checkin_count": {
        "type": "integer",
        "description": "Number of check-ins performed on this list (read-only)."
      },
      "include_pending": {
        "type": "boolean",
        "description": "If true, the check-in list also contains tickets from orders in pending state."
      },
      "allow_multiple_entries": {
        "type": "boolean",
        "description": "If true, subsequent scans of a ticket on this list should not show a warning but instead be stored as an additional check-in."
      },
      "allow_entry_after_exit": {
        "type": "boolean",
        "description": "If true, subsequent scans of a ticket on this list are valid if the last scan of the ticket was an exit scan."
      },
      "rules": {
        "type": "object",
        "description": "Custom check-in logic. The contents of this field are currently not considered a stable API and modifications through the API are highly discouraged."
      },
      "exit_all_at": {
        "type": "datetime",
        "description": "Automatically check out (i.e. perform an exit scan) at this point in time. After this happened, this property will automatically be set exactly one day into the future. Note that this field is considered “internal configuration” and if you pull the list with If-Modified-Since, the daily change in this field will not trigger a response."
      },
      "addon_match": {
        "type": "boolean",
        "description": "If true, tickets on this list can be redeemed by scanning their parent ticket if this still leads to an unambiguous match."
      },
      "ignore_in_statistics": {
        "type": "boolean",
        "description": "If true, check-ins on this list will be ignored in most reporting features."
      },
      "consider_tickets_used": {
        "type": "boolean",
        "description": "If true (default), tickets checked in on this list will be considered “used” by other functionality, i.e. when checking if they can still be canceled."
      }
    },
    "endpoints": {
      "GET /api/v1/organizers/(organizer)/events/(event)/checkinlists/": {
        "description": "Returns a list of all check-in lists within a given event.",
        "name_test": "def test_list_list()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to fetch"
          },
          {
            "name": "event",
            "description": "The slug field of the event to fetch"
          }
        ],
        "query_parameters": [
          {
            "name": "page (integer)",
            "description": "The page number in case of a multi-page result set, default is 1"
          },
          {
            "name": "subevent (integer)",
            "description": "Only return check-in lists of the sub-event with the given ID"
          },
          {
            "name": "subevent_match (integer)",
            "description": "Only return check-in lists that are valid for the sub-event with the given ID (i.e. also lists valid for all subevents)"
          },
          {
            "name": "ends_after (string)",
            "description": "Exclude all check-in lists attached to a sub-event that is already in the past at the given time."
          },
          {
            "name": "expand (string)",
            "description": "Expand a field into a full object. Currently only subevent is supported. Can be passed multiple times."
          },
          {
            "name": "exclude (string)",
            "description": "Exclude a field from the output, e.g. checkin_count. Can be used as a performance optimization. Can be passed multiple times."
          },
          {
            "name": "ordering (string)",
            "description": "Manually set the ordering of results. Valid fields to be used are id, name, and subevent__date_from, Default: subevent__date_from,name"
          }
        ],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event does not exist or you have no permission to view this resource."
          }
        ]
      },
      "GET /api/v1/organizers/(organizer)/events/(event)/checkinlists/(id)/": {
        "description": "Returns information on one check-in list, identified by its ID.",
        "name_test": "def test_list_detail()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to fetch"
          },
          {
            "name": "event",
            "description": "The slug field of the event to fetch"
          },
          {
            "name": "id",
            "description": "The id field of the check-in list to fetch"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event does not exist or you have no permission to view this resource."
          }
        ]
      },
      "POST /api/v1/organizers/(organizer)/events/(event)/checkinlists/": {
        "description": "Creates a new check-in list.",
        "name_test": "def test_list_create()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer of the event/item to create a list for"
          },
          {
            "name": "event",
            "description": "The slug field of the event to create a list for"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "201 Created",
            "description": "no error"
          },
          {
            "name": "400 Bad Request",
            "description": "The list could not be created due to invalid submitted data."
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event does not exist or you have no permission to create this resource."
          }
        ]
      },
      "PATCH /api/v1/organizers/(organizer)/events/(event)/checkinlists/(id)/": {
        "description": "Update a check-in list. You can also use PUT instead of PATCH. With PUT, you have to provide all fields of the resource, other fields will be reset to default. With PATCH, you only need to provide the fields that you want to change.\nYou can change all fields of the resource except the id field and the checkin_count and position_count fields.",
        "name_test": "def test_list_update()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to modify"
          },
          {
            "name": "event",
            "description": "The slug field of the event to modify"
          },
          {
            "name": "id",
            "description": "The id field of the list to modify"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "400 Bad Request",
            "description": "The list could not be modified due to invalid submitted data"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event does not exist or you have no permission to change this resource."
          }
        ]
      },
      "GET /api/v1/organizers/(organizer)/events/(event)/checkinlists/(id)/status/": {
        "description": "Returns detailed status information on a check-in list, identified by its ID.",
        "name_test": "def test_status()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to fetch"
          },
          {
            "name": "event",
            "description": "The slug field of the event to fetch"
          },
          {
            "name": "id",
            "description": "The id field of the check-in list to fetch"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event does not exist or you have no permission to view this resource."
          }
        ]
      },
      "POST /api/v1/organizers/(organizer)/events/(event)/checkinlists/(list)/positions/(id)/redeem/": {
        "description": "Tries to redeem an order position, identified by its internal ID, i.e. checks the attendee in. This endpoint accepts a number of optional requests in the body.\nTip: Instead of an ID, you can also use the secret field as the lookup parameter. In this case, you should always set untrusted_input=true as a query parameter to avoid security issues.",
        "name_test": "def _redeem()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to fetch"
          },
          {
            "name": "event",
            "description": "The slug field of the event to fetch"
          },
          {
            "name": "list",
            "description": "The ID of the check-in list to look for"
          },
          {
            "name": "id",
            "description": "The id field of the order position to fetch"
          }
        ],
        "query_parameters": [
          {
            "name": "untrusted_input (boolean)",
            "description": "If set to true, the lookup parameter is always interpreted as a secret, never as an id. This should be always set if you are passing through untrusted, scanned data to avoid guessing of ticket IDs."
          }
        ],
        "status_codes": [
          {
            "name": "201 Created",
            "description": "no error"
          },
          {
            "name": "400 Bad Request",
            "description": "Invalid or incomplete request, see above"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event does not exist or you have no permission to view this resource."
          },
          {
            "name": "404 Not Found",
            "description": "The requested order position or check-in list does not exist."
          }
        ]
      },
      "POST /api/v1/organizers/(organizer)/events/(event)/checkinlists/(list)/failed_checkins/": {
        "description": "Stores a failed check-in. Only necessary for statistical purposes if you perform scan validation offline.",
        "name_test": "def test_store_failed()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to fetch"
          },
          {
            "name": "event",
            "description": "The slug field of the event to fetch"
          },
          {
            "name": "list",
            "description": "The ID of the check-in list to save for"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "201 Created",
            "description": "no error"
          },
          {
            "name": "400 Bad Request",
            "description": "Invalid request"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event does not exist or you have no permission to view this resource."
          },
          {
            "name": "404 Not Found",
            "description": "The requested order position or check-in list does not exist."
          }
        ]
      }
    }
  },
  "Orders": {
    "description": "-",
    "fields": {
      "event": {
        "type": "string",
        "description": "The slug of the parent event"
      },
      "status": {
        "type": "string",
        "description": "Order status, one of: n – pending, p – paid, e – expired, c – canceled"
      },
      "testmode": {
        "type": "boolean",
        "description": "If true, this order was created when the event was in test mode. Only orders in test mode can be deleted."
      },
      "secret": {
        "type": "string",
        "description": "The secret contained in the link sent to the customer"
      },
      "email": {
        "type": "string",
        "description": "The customer email address"
      },
      "phone": {
        "type": "string",
        "description": "The customer phone number"
      },
      "customer": {
        "type": "string",
        "description": "The customer account identifier (or null)"
      },
      "locale": {
        "type": "string",
        "description": "The locale used for communication with this customer"
      },
      "sales_channel": {
        "type": "string",
        "description": "Channel this sale was created through, such as \"web\"."
      },
      "datetime": {
        "type": "datetime",
        "description": "Time of order creation"
      },
      "expires": {
        "type": "datetime",
        "description": "The order will expire, if it is still pending by this time"
      },
      "payment_date": {
        "type": "date",
        "description": "DEPRECATED AND INACCURATE Date of payment receipt"
      },
      "payment_provider": {
        "type": "string",
        "description": "DEPRECATED AND INACCURATE Payment provider used for this order"
      },
      "total": {
        "type": "money (string)",
        "description": "Total value of this order"
      },
      "comment": {
        "type": "string",
        "description": "Internal comment on this order"
      },
      "api_meta": {
        "type": "object",
        "description": "Meta data for that order. Only available through API, no guarantees on the content structure. You can use this to save references to your system."
      },
      "custom_followup_at": {
        "type": "date",
        "description": "Internal date for a custom follow-up action"
      },
      "checkin_attention": {
        "type": "boolean",
        "description": "If true, the check-in app should show a warning that this ticket requires special attention if a ticket of this order is scanned."
      },
      "checkin_text": {
        "type": "string",
        "description": "Text that will be shown if a ticket of this order is scanned (or null)."
      },
      "invoice_address": {
        "type": "list of objects",
        "description": "Invoice address information (can be null)",
        "list": {
          "last_modified": {
            "type": "datetime",
            "description": "Last modification date of the address"
          },
          "company": {
            "type": "string",
            "description": "Customer company name"
          },
          "is_business": {
            "type": "boolean",
            "description": "Business or individual customers (always false for orders created before pretix 1.7, do not rely on it)."
          },
          "name": {
            "type": "string",
            "description": "Customer name"
          },
          "name_parts": {
            "type": "object of strings",
            "description": "Customer name decomposition"
          },
          "street": {
            "type": "string",
            "description": "Customer street"
          },
          "zipcode": {
            "type": "string",
            "description": "Customer ZIP code"
          },
          "city": {
            "type": "string",
            "description": "Customer city"
          },
          "country": {
            "type": "string",
            "description": "Customer country code"
          },
          "state": {
            "type": "string",
            "description": "Customer state (ISO 3166-2 code). Only supported in AU, BR, CA, CN, MY, MX, and US."
          },
          "internal_reference": {
            "type": "string",
            "description": "Customer’s internal reference to be printed on the invoice"
          },
          "custom_field": {
            "type": "string",
            "description": "Custom invoice address field"
          },
          "vat_id": {
            "type": "string",
            "description": "Customer VAT ID"
          },
          "vat_id_validated": {
            "type": "string",
            "description": "true, if the VAT ID has been validated against the EU VAT service and validation was successful. This only happens in rare cases."
          }
        }
      },
      "positions": {
        "type": "list of objects",
        "description": "List of order positions (see below). By default, only non-canceled positions are included."
      },
      "fees": {
        "type": "list of objects",
        "description": "List of fees included in the order total. By default, only non-canceled fees are included.",
        "list": {
          "id": {
            "type": "integer",
            "description": "Internal ID of the fee record"
          },
          "fee_type": {
            "type": "string",
            "description": "Type of fee (currently payment, shipping, service, cancellation, insurance, late, other, giftcard)"
          },
          "value": {
            "type": "money (string)",
            "description": "Fee amount"
          },
          "description": {
            "type": "string",
            "description": "Human-readable string with more details (can be empty)"
          },
          "internal_type": {
            "type": "string",
            "description": "Internal string (i.e. ID of the payment provider), can be empty"
          },
          "tax_rate": {
            "type": "decimal (string)",
            "description": "VAT rate applied for this fee"
          },
          "tax_value": {
            "type": "money (string)",
            "description": "VAT included in this fee"
          },
          "tax_rule": {
            "type": "integer",
            "description": "The ID of the used tax rule (or null)"
          },
          "tax_code": {
            "type": "string",
            "description": "Codified reason for tax rate (or null), see Tax codes."
          },
          "canceled": {
            "type": "boolean",
            "description": "Whether or not this fee has been canceled."
          }
        }
      },
      "downloads": {
        "type": "list of objects",
        "description": "List of ticket download options for order-wise ticket downloading. This might be a multi-page PDF or a ZIP file of tickets for outputs that do not support multiple tickets natively. See also order position download options.",
        "list": {
          "output": {
            "type": "string",
            "description": "Ticket output provider (e.g. pdf, passbook)"
          },
          "url": {
            "type": "string",
            "description": "Download URL"
          }
        }
      },
      "require_approval": {
        "type": "boolean",
        "description": "If true and the order is pending, this order needs approval by an organizer before it can continue. If true and the order is canceled, this order has been denied by the event organizer."
      },
      "valid_if_pending": {
        "type": "boolean",
        "description": "If true and the order is pending, this order is still treated like a paid order for most purposes, such as check-in. This may be used e.g. for trusted customers who only need to pay after the event."
      },
      "url": {
        "type": "string",
        "description": "The full URL to the order confirmation page"
      },
      "payments": {
        "type": "list of objects",
        "description": "List of payment processes (see below)"
      },
      "refunds": {
        "type": "list of objects",
        "description": "List of refund processes (see below)"
      },
      "last_modified": {
        "type": "datetime",
        "description": "Last modification of this object"
      },
      "cancellation_date": {
        "type": "datetime",
        "description": "Time of order cancellation (or null). Note: Will not be set for partial cancellations and is not reliable for orders that have been cancelled, reactivated and cancelled again."
      },
      "plugin_data": {
        "type": "object",
        "description": "Additional data added by plugins."
      }
    },
    "endpoints": {
      "GET /api/v1/organizers/(organizer)/events/(event)/orders/": {
        "description": "Returns a list of all orders within a given event.",
        "name_test": "def test_order_list()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to fetch"
          },
          {
            "name": "event",
            "description": "The slug field of the event to fetch"
          }
        ],
        "query_parameters": [
          {
            "name": "page (integer)",
            "description": "The page number in case of a multi-page result set, default is 1"
          },
          {
            "name": "ordering (string)",
            "description": "Manually set the ordering of results. Valid fields to be used are datetime, code, last_modified, status and cancellation_date. Default: datetime"
          },
          {
            "name": "code (string)",
            "description": "Only return orders that match the given order code"
          },
          {
            "name": "status (string)",
            "description": "Only return orders in the given order status (see above)"
          },
          {
            "name": "search (string)",
            "description": "Only return orders matching a given search query (matching for names, email addresses, and company names)"
          },
          {
            "name": "customer (string)",
            "description": "Only show orders linked to the given customer."
          },
          {
            "name": "item (integer)",
            "description": "Only return orders with a position that contains this item ID. Warning: Result will also include orders if they contain mixed items, and it will even return orders where the item is only contained in a canceled position."
          },
          {
            "name": "variation (integer)",
            "description": "Only return orders with a position that contains this variation ID. Warning: Result will also include orders if they contain mixed items and variations, and it will even return orders where the variation is only contained in a canceled position."
          },
          {
            "name": "testmode (boolean)",
            "description": "Only return orders with testmode set to true or false"
          },
          {
            "name": "require_approval (boolean)",
            "description": "If set to true or false, only categories with this value for the field require_approval will be returned."
          },
          {
            "name": "include_canceled_positions",
            "description": "If set to true, the output will contain canceled order positions. Note that this only affects position-level cancellations, not fully-canceled orders."
          },
          {
            "name": "include_canceled_fees",
            "description": "If set to true, the output will contain canceled order fees."
          },
          {
            "name": "email (string)",
            "description": "Only return orders created with the given email address"
          },
          {
            "name": "locale (string)",
            "description": "Only return orders with the given customer locale"
          },
          {
            "name": "modified_since (datetime)",
            "description": "Only return orders that have changed since the given date. Be careful: We only recommend using this in combination with testmode=false, since test mode orders can vanish at any time and you will not notice it using this method."
          },
          {
            "name": "created_since (datetime)",
            "description": "Only return orders that have been created since the given date (inclusive)."
          },
          {
            "name": "created_before (datetime)",
            "description": "Only return orders that have been created before the given date (exclusive)."
          },
          {
            "name": "subevent (integer)",
            "description": "Only return orders with a position that contains this subevent ID. Warning: Result will also include orders if they contain mixed subevents, and it will even return orders where the subevent is only contained in a canceled position."
          },
          {
            "name": "subevent_after (datetime)",
            "description": "Only return orders that contain a ticket for a subevent taking place after the given date. This is an exclusive after, and it considers the end of the subevent (or its start, if the end is not set)."
          },
          {
            "name": "subevent_before (datetime)",
            "description": "Only return orders that contain a ticket for a subevent taking place after the given date. This is an exclusive before, and it considers the start of the subevent."
          },
          {
            "name": "sales_channel (string)",
            "description": "Only return orders with the given sales channel identifier (e.g. \"web\")."
          },
          {
            "name": "payment_provider (string)",
            "description": "Only return orders that contain a payment using the given payment provider. Note that this also searches for partial incomplete, or failed payments within the order and is not useful to get a sum of payment amounts without further processing."
          },
          {
            "name": "exclude (string)",
            "description": "Exclude a field from the output, e.g. fees or positions.downloads. Can be used as a performance optimization. Can be passed multiple times."
          },
          {
            "name": "include (string)",
            "description": "Include only the given field in the output, e.g. fees or positions.downloads. Can be used as a performance optimization. Can be passed multiple times. include is applied before exclude, so exclude takes precedence."
          }
        ],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event does not exist or you have no permission to view this resource."
          }
        ]
      },
      "GET /api/v1/organizers/(organizer)/orders/": {
        "description": "Returns a list of all orders within all events of a given organizer (with sufficient access permissions).\nSupported query parameters and output format of this endpoint are identical to the list endpoint within an event, with the exception that the pdf_data parameter is not supported here.",
        "name_test": "def test_organizer_level()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to fetch"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event does not exist or you have no permission to view this resource."
          }
        ]
      },
      "GET /api/v1/organizers/(organizer)/events/(event)/orders/(code)/": {
        "description": "Returns information on one order, identified by its order code.",
        "name_test": "def test_order_detail()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to fetch"
          },
          {
            "name": "event",
            "description": "The slug field of the event to fetch"
          },
          {
            "name": "code",
            "description": "The code field of the order to fetch"
          }
        ],
        "query_parameters": [
          {
            "name": "include_canceled_positions",
            "description": "If set to true, the output will contain canceled order positions. Note that this only affects position-level cancellations, not fully-canceled orders."
          },
          {
            "name": "include_canceled_fees",
            "description": "If set to true, the output will contain canceled order fees."
          }
        ],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event does not exist or you have no permission to view this resource."
          },
          {
            "name": "404 Not Found",
            "description": "The requested order does not exist."
          }
        ]
      },
      "POST /api/v1/organizers/(organizer)/events/(event)/orders/": {
        "description": "Creates a new order.",
        "name_test": "def test_order_create()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer of the event to create an order for"
          },
          {
            "name": "event",
            "description": "The slug field of the event to create an order for"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "201 Created",
            "description": "no error"
          },
          {
            "name": "400 Bad Request",
            "description": "The order could not be created due to invalid submitted data or lack of quota."
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event does not exist or you have no permission to create this order."
          }
        ]
      },
      "POST /api/v1/organizers/(organizer)/events/(event)/orders/(code)/reactivate/": {
        "description": "Reactivates a canceled order. This will set the order to pending or paid state. Only possible if all products are still available.",
        "name_test": "def test_order_reactivate()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to modify"
          },
          {
            "name": "event",
            "description": "The slug field of the event to modify"
          },
          {
            "name": "code",
            "description": "The code field of the order to modify"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "400 Bad Request",
            "description": "The order cannot be reactivated"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event does not exist or you have no permission to view this resource."
          },
          {
            "name": "404 Not Found",
            "description": "The requested order does not exist."
          }
        ]
      },
      "POST /api/v1/organizers/(organizer)/events/(event)/orders/(code)/approve/": {
        "description": "Approve an order that is pending approval.",
        "name_test": "def test_order_pending_approve()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to modify"
          },
          {
            "name": "event",
            "description": "The slug field of the event to modify"
          },
          {
            "name": "code",
            "description": "The code field of the order to modify"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "400 Bad Request",
            "description": "The order cannot be approved, likely because the current order status does not allow it."
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event does not exist or you have no permission to view this resource."
          },
          {
            "name": "404 Not Found",
            "description": "The requested order does not exist."
          },
          {
            "name": "409 Conflict",
            "description": "The server was unable to acquire a lock and could not process your request. You can try again after a short waiting period."
          }
        ]
      },
      "POST /api/v1/organizers/(organizer)/events/(event)/orders/(code)/deny/": {
        "description": "Marks an order that is pending approval as denied.",
        "name_test": "def test_order_pending_deny()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to modify"
          },
          {
            "name": "event",
            "description": "The slug field of the event to modify"
          },
          {
            "name": "code",
            "description": "The code field of the order to modify"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "400 Bad Request",
            "description": "The order cannot be marked as denied since the current order status does not allow it."
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event does not exist or you have no permission to update this resource."
          },
          {
            "name": "404 Not Found",
            "description": "The requested order does not exist."
          }
        ]
      },
      "DELETE /api/v1/organizers/(organizer)/events/(event)/orders/(code)/": {
        "description": "Deletes an order. Works only if the order has testmode set to true.",
        "name_test": "def test_order_delete()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to fetch"
          },
          {
            "name": "event",
            "description": "The slug field of the event to fetch"
          },
          {
            "name": "code",
            "description": "The code field of the order to delete"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "204 No Content",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event does not exist or you have no permission to delete this resource or the order may not be deleted."
          },
          {
            "name": "404 Not Found",
            "description": "The requested order does not exist."
          }
        ]
      },
      "POST /api/v1/organizers/(organizer)/events/(event)/orders/(code)/create_invoice/": {
        "description": "Creates an invoice for an order which currently does not have an invoice. Returns the invoice object.",
        "name_test": "def test_order_create_invoice()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to modify"
          },
          {
            "name": "event",
            "description": "The slug field of the event to modify"
          },
          {
            "name": "code",
            "description": "The code field of the order to create an invoice for"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "400 Bad Request",
            "description": "The invoice can not be created (invoicing disabled, the order already has an invoice, …)"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event does not exist or you have no permission to view this resource."
          },
          {
            "name": "404 Not Found",
            "description": "The requested order does not exist."
          }
        ]
      },
      "POST /api/v1/organizers/(organizer)/events/(event)/orders/(code)/regenerate_secrets/": {
        "description": "Triggers generation of new secret and web_secret attributes for both the order and all order positions.",
        "name_test": "def test_order_regenerate_secrets()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer of the event"
          },
          {
            "name": "event",
            "description": "The slug field of the event"
          },
          {
            "name": "code",
            "description": "The code field of the order to update"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "400 Bad Request",
            "description": "The order could not be updated due to invalid submitted data."
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event does not exist or you have no permission to update this order."
          }
        ]
      },
      "POST /api/v1/organizers/(organizer)/events/(event)/orderpositions/(id)/regenerate_secrets/": {
        "description": "Triggers generation of a new secret and web_secret attribute for a single order position.",
        "name_test": "def test_position_regenerate_secrets()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer of the event"
          },
          {
            "name": "event",
            "description": "The slug field of the event"
          },
          {
            "name": "code",
            "description": "The id field of the order position to update"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "400 Bad Request",
            "description": "The order position could not be updated due to invalid submitted data."
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event does not exist or you have no permission to update this order position."
          }
        ]
      },
      "POST /api/v1/organizers/(organizer)/events/(event)/orders/(code)/resend_link/": {
        "description": "Sends an email to the buyer with the link to the order page.",
        "name_test": "def test_order_resend_link()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to modify"
          },
          {
            "name": "event",
            "description": "The slug field of the event to modify"
          },
          {
            "name": "code",
            "description": "The code field of the order to send an email for"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "400 Bad Request",
            "description": "The order does not have an email address associated"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event does not exist or you have no permission to view this resource."
          },
          {
            "name": "404 Not Found",
            "description": "The requested order does not exist."
          },
          {
            "name": "503 Service Unavailable",
            "description": "The email could not be sent."
          }
        ]
      }
    }
  },
  "Order position": {
    "description": "-",
    "fields": {
      "order": {
        "type": "string",
        "description": "Order code of the order the position belongs to"
      },
      "positionid": {
        "type": "integer",
        "description": "Number of the position within the order"
      },
      "canceled": {
        "type": "boolean",
        "description": "Whether or not this position has been canceled. Note that by default, only non-canceled positions are shown."
      },
      "item": {
        "type": "integer",
        "description": "ID of the purchased item"
      },
      "variation": {
        "type": "integer",
        "description": "ID of the purchased variation (or null)"
      },
      "price": {
        "type": "money (string)",
        "description": "Price of this position"
      },
      "attendee_name": {
        "type": "string",
        "description": "Specified attendee name for this position (or null)"
      },
      "attendee_name_parts": {
        "type": "object of strings",
        "description": "Decomposition of attendee name (i.e. given name, family name)"
      },
      "attendee_email": {
        "type": "string",
        "description": "Specified attendee email address for this position (or null)"
      },
      "company": {
        "type": "string",
        "description": "Attendee company name (or null)"
      },
      "street": {
        "type": "string",
        "description": "Attendee street (or null)"
      },
      "zipcode": {
        "type": "string",
        "description": "Attendee ZIP code (or null)"
      },
      "city": {
        "type": "string",
        "description": "Attendee city (or null)"
      },
      "country": {
        "type": "string",
        "description": "Attendee country code (or null)"
      },
      "state": {
        "type": "string",
        "description": "Attendee state (ISO 3166-2 code). Only supported in AU, BR, CA, CN, MY, MX, and US, otherwise null."
      },
      "voucher": {
        "type": "integer",
        "description": "Internal ID of the voucher used for this position (or null)"
      },
      "voucher_budget_use": {
        "type": "money (string)",
        "description": "Amount of money discounted by the voucher, corresponding to how much of the budget of the voucher is consumed. Important: Do not rely on this amount to be a useful value if the position’s price, product or voucher are changed after the order was created. Can be null."
      },
      "tax_rate": {
        "type": "decimal (string)",
        "description": "VAT rate applied for this position"
      },
      "tax_value": {
        "type": "money (string)",
        "description": "VAT included in this position"
      },
      "tax_code": {
        "type": "string",
        "description": "Codified reason for tax rate (or null), see Tax codes."
      },
      "tax_rule": {
        "type": "integer",
        "description": "The ID of the used tax rule (or null)"
      },
      "secret": {
        "type": "string",
        "description": "Secret code printed on the tickets for validation"
      },
      "addon_to": {
        "type": "integer",
        "description": "Internal ID of the position this position is an add-on for (or null)"
      },
      "subevent": {
        "type": "integer",
        "description": "ID of the date inside an event series this position belongs to (or null)."
      },
      "discount": {
        "type": "integer",
        "description": "ID of a discount that has been used during the creation of this position in some way (or null)."
      },
      "blocked": {
        "type": "list of strings",
        "description": "A list of strings, or null. Whenever not null, the ticket may not be used (e.g. for check-in)."
      },
      "valid_from": {
        "type": "datetime",
        "description": "The ticket will not be valid before this time. Can be null."
      },
      "valid_until": {
        "type": "datetime",
        "description": "The ticket will not be valid after this time. Can be null."
      },
      "pseudonymization_id": {
        "type": "string",
        "description": "A random ID, e.g. for use in lead scanning apps"
      },
      "checkins": {
        "type": "list of objects",
        "description": "List of successful check-ins with this ticket",
        "list": {
          "id": {
            "type": "integer",
            "description": "Internal ID of the check-in event"
          },
          "list": {
            "type": "integer",
            "description": "Internal ID of the check-in list"
          },
          "datetime": {
            "type": "datetime",
            "description": "Time of check-in"
          },
          "type": {
            "type": "string",
            "description": "Type of scan (defaults to entry)"
          },
          "gate": {
            "type": "integer",
            "description": "Internal ID of the gate. Can be null."
          },
          "device": {
            "type": "integer",
            "description": "Internal ID of the device. Can be null. Deprecated, since this ID is not otherwise used in the API and is therefore not very useful."
          },
          "device_id": {
            "type": "integer",
            "description": "Attribute device_id of the device. Can be null."
          },
          "auto_checked_in": {
            "type": "boolean",
            "description": "Indicates if this check-in been performed automatically by the system"
          }
        }
      },
      "print_logs": {
        "type": "list of objects",
        "description": "List of print jobs recorded e.g. by the pretix apps",
        "list": {
          "id": {
            "type": "integer",
            "description": "Internal ID of the print job"
          },
          "successful": {
            "type": "boolean",
            "description": "Whether the print job successfully resulted in a print. This is not expected to be 100 % reliable information (since printer feedback is never perfect) and there is no guarantee that unsuccessful jobs will be logged."
          },
          "device_id": {
            "type": "integer",
            "description": "Attribute device_id of the device that recorded the print. Can be null."
          },
          "datetime": {
            "type": "datetime",
            "description": "Time of printing"
          },
          "source": {
            "type": "string",
            "description": "Source of print job, e.g. name of the app used."
          },
          "type": {
            "type": "string",
            "description": "Type of print (currently badge, ticket, certificate, or other)"
          },
          "info": {
            "type": "object",
            "description": "Additional data with client-dependent structure."
          }
        }
      },
      "downloads": {
        "type": "list of objects",
        "description": "List of ticket download options",
        "list": {
          "output": {
            "type": "string",
            "description": "Ticket output provider (e.g. pdf, passbook)"
          },
          "url": {
            "type": "string",
            "description": "Download URL"
          }
        }
      },
      "answers": {
        "type": "list of objects",
        "description": "Answers to user-defined questions",
        "list": {
          "question": {
            "type": "integer",
            "description": "Internal ID of the answered question"
          },
          "answer": {
            "type": "string",
            "description": "Text representation of the answer (URL if answer is a file)"
          },
          "question_identifier": {
            "type": "string",
            "description": "The question’s identifier field"
          },
          "options": {
            "type": "list of integers",
            "description": "Internal IDs of selected option(s)s (only for choice types)"
          },
          "option_identifiers": {
            "type": "list of strings",
            "description": "The identifier fields of the selected option(s)s"
          }
        }
      },
      "seat": {
        "type": "list of objects",
        "description": "The assigned seat. Can be null.",
        "list": {
          "id": {
            "type": "integer",
            "description": "Internal ID of the seat instance"
          },
          "name": {
            "type": "string",
            "description": "Human-readable seat name"
          },
          "zone_name": {
            "type": "string",
            "description": "Name of the zone the seat is in"
          },
          "row_name": {
            "type": "string",
            "description": "Name/number of the row the seat is in"
          },
          "row_label": {
            "type": "string",
            "description": "Additional label of the row (or null)"
          },
          "seat_number": {
            "type": "string",
            "description": "Number of the seat within the row"
          },
          "seat_label": {
            "type": "string",
            "description": "Additional label of the seat (or null)"
          },
          "seat_guid": {
            "type": "string",
            "description": "Identifier of the seat within the seating plan"
          }
        }
      },
      "pdf_data": {
        "type": "object",
        "description": "Data object required for ticket PDF generation. By default, this field is missing. It will be added only if you add the pdf_data=true query parameter to your request."
      },
      "plugin_data": {
        "type": "object",
        "description": "Additional data added by plugins."
      }
    },
    "endpoints": {
      "GET /api/v1/organizers/(organizer)/events/(event)/orderpositions/": {
        "description": "Returns a list of all order positions within a given event.",
        "name_test": "def test_orderposition_list()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to fetch"
          },
          {
            "name": "event",
            "description": "The slug field of the event to fetch"
          }
        ],
        "query_parameters": [
          {
            "name": "page (integer)",
            "description": "The page number in case of a multi-page result set, default is 1"
          },
          {
            "name": "ordering (string)",
            "description": "Manually set the ordering of results. Valid fields to be used are order__code, order__datetime, positionid, attendee_name, and order__status. Default: order__datetime,positionid"
          },
          {
            "name": "order (string)",
            "description": "Only return positions of the order with the given order code"
          },
          {
            "name": "search (string)",
            "description": "Fuzzy search matching the attendee name, order code, invoice address name as well as to the beginning of the secret."
          },
          {
            "name": "customer (string)",
            "description": "Only show orders linked to the given customer."
          },
          {
            "name": "item (integer)",
            "description": "Only return positions with the purchased item matching the given ID."
          },
          {
            "name": "item__in (integer)",
            "description": "Only return positions with the purchased item matching one of the given comma-separated IDs."
          },
          {
            "name": "variation (integer)",
            "description": "Only return positions with the purchased item variation matching the given ID."
          },
          {
            "name": "variation__in (integer)",
            "description": "Only return positions with one of the purchased item variation matching the given comma-separated IDs."
          },
          {
            "name": "attendee_name (string)",
            "description": "Only return positions with the given value in the attendee_name field. Also, add-on products positions are shown if they refer to an attendee with the given name."
          },
          {
            "name": "secret (string)",
            "description": "Only return positions with the given ticket secret."
          },
          {
            "name": "pseudonymization_id (string)",
            "description": "Only return positions with the given pseudonymization ID."
          },
          {
            "name": "order__status (string)",
            "description": "Only return positions with the given order status."
          },
          {
            "name": "order__status__in (string)",
            "description": "Only return positions with one the given comma-separated order status."
          },
          {
            "name": "has_checkin (boolean)",
            "description": "If set to true or false, only return positions that have or have not been checked in already."
          },
          {
            "name": "subevent (integer)",
            "description": "Only return positions of the sub-event with the given ID"
          },
          {
            "name": "subevent__in (integer)",
            "description": "Only return positions of one of the sub-events with the given comma-separated IDs"
          },
          {
            "name": "addon_to (integer)",
            "description": "Only return positions that are add-ons to the position with the given ID."
          },
          {
            "name": "addon_to__in (integer)",
            "description": "Only return positions that are add-ons to one of the positions with the given comma-separated IDs."
          },
          {
            "name": "voucher (string)",
            "description": "Only return positions with a specific voucher."
          },
          {
            "name": "voucher__code (string)",
            "description": "Only return positions with a specific voucher code."
          },
          {
            "name": "include_canceled_positions",
            "description": "If set to true, the output will contain canceled order positions. Note that this only affects position-level cancellations, not fully-canceled orders."
          }
        ],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event does not exist or you have no permission to view this resource."
          }
        ]
      },
      "GET /api/v1/organizers/(organizer)/events/(event)/orderpositions/(id)/": {
        "description": "Returns information on one order position, identified by its internal ID.",
        "name_test": "def test_orderposition_detail()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to fetch"
          },
          {
            "name": "event",
            "description": "The slug field of the event to fetch"
          },
          {
            "name": "id",
            "description": "The id field of the order position to fetch"
          }
        ],
        "query_parameters": [
          {
            "name": "include_canceled_positions",
            "description": "If set to true, canceled positions may be returned (otherwise, they return 404)."
          }
        ],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event does not exist or you have no permission to view this resource."
          },
          {
            "name": "404 Not Found",
            "description": "The requested order position does not exist."
          }
        ]
      },
      "DELETE /api/v1/organizers/(organizer)/events/(event)/orderpositions/(id)/": {
        "description": "Cancels an order position, identified by its internal ID.",
        "name_test": "def test_orderposition_delete()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to fetch"
          },
          {
            "name": "event",
            "description": "The slug field of the event to fetch"
          },
          {
            "name": "id",
            "description": "The id field of the order position to delete"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "204 No Content",
            "description": "no error"
          },
          {
            "name": "400 Bad Request",
            "description": "This position cannot be deleted (e.g. last position in order)"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event does not exist or you have no permission to view this resource."
          },
          {
            "name": "404 Not Found",
            "description": "The requested order position does not exist."
          }
        ]
      },
      "POST /api/v1/organizers/(organizer)/events/(event)/orderpositions/(id)/printlog/": {
        "description": "Creates a print log, stating that this ticket has been printed.",
        "name_test": "def test_orderposition_printlog()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to create a log for"
          },
          {
            "name": "event",
            "description": "The slug field of the event to create a log for"
          },
          {
            "name": "id",
            "description": "The id field of the order position to create a log for"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "201 Created",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event does not exist or you have no permission to view this resource or downloads are not available for this order position at this time. The response content will contain more details."
          },
          {
            "name": "404 Not Found",
            "description": "The requested order position or download provider does not exist."
          },
          {
            "name": "409 Conflict",
            "description": "The file is not yet ready and will now be prepared. Retry the request after waiting for a few seconds."
          }
        ]
      }
    }
  },
  "Order payment": {
    "description": "-",
    "fields": {
      "state": {
        "type": "string",
        "description": "Payment state, one of created, pending, confirmed, canceled, pending, failed, or refunded"
      },
      "amount": {
        "type": "money (string)",
        "description": "Payment amount"
      },
      "created": {
        "type": "datetime",
        "description": "Date and time of creation of this payment"
      },
      "payment_date": {
        "type": "datetime",
        "description": "Date and time of completion of this payment (or null)"
      },
      "provider": {
        "type": "string",
        "description": "Identification string of the payment provider"
      },
      "payment_url": {
        "type": "string",
        "description": "The URL where an user can continue with the payment (or null)"
      },
      "details": {
        "type": "object",
        "description": "Payment-specific information. This is a dictionary with various fields that can be different between payment providers, versions, payment states, etc. If you read this field, you always need to be able to deal with situations where values that you expect are missing. Mostly, the field contains various IDs that can be used for matching with other systems. If a payment provider does not implement this feature, the object is empty."
      }
    },
    "endpoints": {
      "GET /api/v1/organizers/(organizer)/events/(event)/orders/(code)/payments/": {
        "description": "Returns a list of all payments for an order.",
        "name_test": "def test_payment_list()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to fetch"
          },
          {
            "name": "event",
            "description": "The slug field of the event to fetch"
          },
          {
            "name": "order",
            "description": "The code field of the order to fetch"
          }
        ],
        "query_parameters": [
          {
            "name": "page (integer)",
            "description": "The page number in case of a multi-page result set, default is 1"
          }
        ],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event does not exist or you have no permission to view this resource."
          },
          {
            "name": "404 Not Found",
            "description": "The requested order does not exist."
          }
        ]
      },
      "GET /api/v1/organizers/(organizer)/events/(event)/orders/(code)/payments/(local_id)/": {
        "description": "Returns information on one payment, identified by its order-local ID.",
        "name_test": "def test_payment_detail()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to fetch"
          },
          {
            "name": "event",
            "description": "The slug field of the event to fetch"
          },
          {
            "name": "code",
            "description": "The code field of the order to fetch"
          },
          {
            "name": "local_id",
            "description": "The local_id field of the payment to fetch"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event does not exist or you have no permission to view this resource."
          },
          {
            "name": "404 Not Found",
            "description": "The requested order or payment does not exist."
          }
        ]
      },
      "POST /api/v1/organizers/(organizer)/events/(event)/orders/(code)/payments/(local_id)/confirm/": {
        "description": "Marks a payment as confirmed. Only allowed in states pending and created.",
        "name_test": "def test_payment_confirm()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to fetch"
          },
          {
            "name": "event",
            "description": "The slug field of the event to fetch"
          },
          {
            "name": "code",
            "description": "The code field of the order to fetch"
          },
          {
            "name": "local_id",
            "description": "The local_id field of the payment to modify"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "400 Bad Request",
            "description": "Invalid request or payment state"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event does not exist or you have no permission to view this resource."
          },
          {
            "name": "404 Not Found",
            "description": "The requested order or payment does not exist."
          }
        ]
      },
      "POST /api/v1/organizers/(organizer)/events/(event)/orders/(code)/payments/(local_id)/cancel/": {
        "description": "Marks a payment as canceled. Only allowed in states pending and created.",
        "name_test": "def test_payment_cancel()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to fetch"
          },
          {
            "name": "event",
            "description": "The slug field of the event to fetch"
          },
          {
            "name": "code",
            "description": "The code field of the order to fetch"
          },
          {
            "name": "local_id",
            "description": "The local_id field of the payment to modify"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "400 Bad Request",
            "description": "Invalid request or payment state"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event does not exist or you have no permission to view this resource."
          },
          {
            "name": "404 Not Found",
            "description": "The requested order or payment does not exist."
          }
        ]
      },
      "POST /api/v1/organizers/(organizer)/events/(event)/orders/(code)/payments/(local_id)/refund/": {
        "description": "Create and execute a manual refund. Only available in confirmed state. Returns a refund resource, not a payment resource!",
        "name_test": "def test_payment_refund_success()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to fetch"
          },
          {
            "name": "event",
            "description": "The slug field of the event to fetch"
          },
          {
            "name": "code",
            "description": "The code field of the order to fetch"
          },
          {
            "name": "local_id",
            "description": "The local_id field of the payment to modify"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "400 Bad Request",
            "description": "Invalid request, payment state, or operation not supported by the payment provider"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event does not exist or you have no permission to view this resource."
          },
          {
            "name": "404 Not Found",
            "description": "The requested order or payment does not exist."
          }
        ]
      },
      "POST /api/v1/organizers/(organizer)/events/(event)/orders/(code)/payments/": {
        "description": "Creates a new payment.\nBe careful with the info parameter: You can pass a nested JSON object that will be set as the internal info value of the payment object that will be created. How this value is handled is up to the payment provider and you should only use this if you know the specific payment provider in detail. Please keep in mind that the payment provider will not be called to do anything about this (i.e. if you pass a bank account to a debit provider, no charge will be created), this is just informative in case you handled the payment already.",
        "name_test": "def test_payment_create_confirmed()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to access"
          },
          {
            "name": "event",
            "description": "The slug field of the event to access"
          },
          {
            "name": "order",
            "description": "The code field of the order to access"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "201 Created",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event does not exist or you have no permission to view this resource."
          },
          {
            "name": "404 Not Found",
            "description": "The requested order does not exist."
          }
        ]
      }
    }
  },
  "Order refund": {
    "description": "-",
    "fields": {
      "state": {
        "type": "string",
        "description": "Payment state, one of created, transit, external, canceled, failed, or done"
      },
      "source": {
        "type": "string",
        "description": "How this refund has been created, one of buyer, admin, or external"
      },
      "amount": {
        "type": "money (string)",
        "description": "Payment amount"
      },
      "created": {
        "type": "datetime",
        "description": "Date and time of creation of this payment"
      },
      "comment": {
        "type": "string",
        "description": "Reason for refund (shown to the customer in some cases, can be null)."
      },
      "execution_date": {
        "type": "datetime",
        "description": "Date and time of completion of this refund (or null)"
      },
      "provider": {
        "type": "string",
        "description": "Identification string of the payment provider"
      },
      "details": {
        "type": "object",
        "description": "Refund-specific information. This is a dictionary with various fields that can be different between payment providers, versions, payment states, etc. If you read this field, you always need to be able to deal with situations where values that you expect are missing. Mostly, the field contains various IDs that can be used for matching with other systems. If a payment provider does not implement this feature, the object is empty."
      }
    },
    "endpoints": {
      "GET /api/v1/organizers/(organizer)/events/(event)/orders/(code)/refunds/": {
        "description": "Returns a list of all refunds for an order.",
        "name_test": "def test_refund_list()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to fetch"
          },
          {
            "name": "event",
            "description": "The slug field of the event to fetch"
          },
          {
            "name": "order",
            "description": "The code field of the order to fetch"
          }
        ],
        "query_parameters": [
          {
            "name": "page (integer)",
            "description": "The page number in case of a multi-page result set, default is 1"
          }
        ],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event does not exist or you have no permission to view this resource."
          },
          {
            "name": "404 Not Found",
            "description": "The requested order does not exist."
          }
        ]
      },
      "GET /api/v1/organizers/(organizer)/events/(event)/orders/(code)/refunds/(local_id)/": {
        "description": "Returns information on one refund, identified by its order-local ID.",
        "name_test": "def test_refund_detail()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to fetch"
          },
          {
            "name": "event",
            "description": "The slug field of the event to fetch"
          },
          {
            "name": "code",
            "description": "The code field of the order to fetch"
          },
          {
            "name": "local_id",
            "description": "The local_id field of the refund to fetch"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event does not exist or you have no permission to view this resource."
          },
          {
            "name": "404 Not Found",
            "description": "The requested order or refund does not exist."
          }
        ]
      },
      "POST /api/v1/organizers/(organizer)/events/(event)/orders/(code)/refunds/(local_id)/done/": {
        "description": "Marks a refund as completed. Only allowed in states transit and created.",
        "name_test": "def test_refund_done()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to fetch"
          },
          {
            "name": "event",
            "description": "The slug field of the event to fetch"
          },
          {
            "name": "code",
            "description": "The code field of the order to fetch"
          },
          {
            "name": "local_id",
            "description": "The local_id field of the refund to modify"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "400 Bad Request",
            "description": "Invalid request or refund state"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event does not exist or you have no permission to view this resource."
          },
          {
            "name": "404 Not Found",
            "description": "The requested order or refund does not exist."
          }
        ]
      },
      "POST /api/v1/organizers/(organizer)/events/(event)/orders/(code)/refunds/(local_id)/cancel/": {
        "description": "Marks a refund as canceled. Only allowed in states transit, external, and created.",
        "name_test": "def test_refund_cancel()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to fetch"
          },
          {
            "name": "event",
            "description": "The slug field of the event to fetch"
          },
          {
            "name": "code",
            "description": "The code field of the order to fetch"
          },
          {
            "name": "local_id",
            "description": "The local_id field of the refund to modify"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "400 Bad Request",
            "description": "Invalid request or refund state"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event does not exist or you have no permission to view this resource."
          },
          {
            "name": "404 Not Found",
            "description": "The requested order or refund does not exist."
          }
        ]
      },
      "POST /api/v1/organizers/(organizer)/events/(event)/orders/(code)/refunds/": {
        "description": "Creates a refund manually.",
        "name_test": "def test_refund_create()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to fetch"
          },
          {
            "name": "event",
            "description": "The slug field of the event to fetch"
          },
          {
            "name": "order",
            "description": "The code field of the order to fetch"
          }
        ],
        "query_parameters": [
          {
            "name": "page (integer)",
            "description": "The page number in case of a multi-page result set, default is 1"
          }
        ],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "400 Bad Request",
            "description": "Invalid data supplied"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event does not exist or you have no permission to view this resource."
          },
          {
            "name": "404 Not Found",
            "description": "The requested order does not exist."
          }
        ]
      }
    }
  },
  "Revoked ticket secrets": {
    "description": "With some non-default ticket secret generation methods, a list of revoked ticket secrets is required for proper validation.",
    "fields": {},
    "endpoints": {
      "GET /api/v1/organizers/(organizer)/events/(event)/revokedsecrets/": {
        "description": "Returns a list of all revoked secrets within a given event.",
        "name_test": "def test_revoked_secret_list()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to fetch"
          },
          {
            "name": "event",
            "description": "The slug field of the event to fetch"
          }
        ],
        "query_parameters": [
          {
            "name": "page (integer)",
            "description": "The page number in case of a multi-page result set, default is 1"
          },
          {
            "name": "ordering (string)",
            "description": "Manually set the ordering of results. Valid fields to be used are secret and created. Default: -created"
          },
          {
            "name": "created_since (datetime)",
            "description": "Only return revocations that have been created since the given date."
          }
        ],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event does not exist or you have no permission to view this resource."
          }
        ]
      }
    }
  },
  "Blocked ticket secrets": {
    "description": "With some non-default ticket secret generation methods, a list of blocked ticket secrets is required for proper validation. This endpoint returns all secrets that are currently blocked or have been blocked before and are now unblocked, so be sure to check the blocked attribute for its actual value. The list is currently always ordered with the most recently updated ones first.",
    "fields": {},
    "endpoints": {
      "GET /api/v1/organizers/(organizer)/events/(event)/blockedsecrets/": {
        "description": "Returns a list of all blocked or historically blocked secrets within a given event.",
        "name_test": "def test_blocked_secret_list()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to fetch"
          },
          {
            "name": "event",
            "description": "The slug field of the event to fetch"
          }
        ],
        "query_parameters": [
          {
            "name": "page (integer)",
            "description": "The page number in case of a multi-page result set, default is 1"
          },
          {
            "name": "updated_since (datetime)",
            "description": "Only return records that have been updated since the given date."
          },
          {
            "name": "blocked (boolean)",
            "description": "Only return blocked / non-blocked records."
          }
        ],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event does not exist or you have no permission to view this resource."
          }
        ]
      }
    }
  },
  "Invoices": {
    "description": "-",
    "fields": {
      "event": {
        "type": "string",
        "description": "The slug of the parent event"
      },
      "order": {
        "type": "string",
        "description": "Order code of the order this invoice belongs to"
      },
      "is_cancellation": {
        "type": "boolean",
        "description": "true, if this invoice is the cancellation of a different invoice."
      },
      "invoice_from_name": {
        "type": "string",
        "description": "Sender address: Name"
      },
      "invoice_from": {
        "type": "string",
        "description": "Sender address: Address lines"
      },
      "invoice_from_zipcode": {
        "type": "string",
        "description": "Sender address: ZIP code"
      },
      "invoice_from_city": {
        "type": "string",
        "description": "Sender address: City"
      },
      "invoice_from_country": {
        "type": "string",
        "description": "Sender address: Country code"
      },
      "invoice_from_tax_id": {
        "type": "string",
        "description": "Sender address: Local Tax ID"
      },
      "invoice_from_vat_id": {
        "type": "string",
        "description": "Sender address: EU VAT ID"
      },
      "invoice_to": {
        "type": "string",
        "description": "Full recipient address"
      },
      "invoice_to_company": {
        "type": "string",
        "description": "Recipient address: Company name"
      },
      "invoice_to_name": {
        "type": "string",
        "description": "Recipient address: Person name"
      },
      "invoice_to_street": {
        "type": "string",
        "description": "Recipient address: Address lines"
      },
      "invoice_to_zipcode": {
        "type": "string",
        "description": "Recipient address: ZIP code"
      },
      "invoice_to_city": {
        "type": "string",
        "description": "Recipient address: City"
      },
      "invoice_to_state": {
        "type": "string",
        "description": "Recipient address: State (only used in some countries)"
      },
      "invoice_to_country": {
        "type": "string",
        "description": "Recipient address: Country code"
      },
      "invoice_to_vat_id": {
        "type": "string",
        "description": "Recipient address: EU VAT ID"
      },
      "invoice_to_beneficiary": {
        "type": "string",
        "description": "Invoice beneficiary"
      },
      "custom_field": {
        "type": "string",
        "description": "Custom invoice address field"
      },
      "date": {
        "type": "date",
        "description": "Invoice date"
      },
      "refers": {
        "type": "string",
        "description": "Invoice number of an invoice this invoice refers to (for example a cancellation refers to the invoice it cancels) or null."
      },
      "locale": {
        "type": "string",
        "description": "Invoice locale"
      },
      "introductory_text": {
        "type": "string",
        "description": "Text to be printed above the product list"
      },
      "additional_text": {
        "type": "string",
        "description": "Text to be printed below the product list"
      },
      "payment_provider_text": {
        "type": "string",
        "description": "Text to be printed below the product list with payment information"
      },
      "payment_provider_stamp": {
        "type": "string",
        "description": "Short text to be visibly printed to indicate payment status"
      },
      "footer_text": {
        "type": "string",
        "description": "Text to be printed in the page footer area"
      },
      "lines": {
        "type": "list of objects",
        "description": "The actual invoice contents",
        "list": {
          "position": {
            "type": "integer",
            "description": "Number of the line within an invoice."
          },
          "description": {
            "type": "string",
            "description": "Text representing the invoice line (e.g. product name)"
          },
          "item": {
            "type": "integer",
            "description": "Product used to create this line. Note that everything about the product might have changed since the creation of the invoice. Can be null for all invoice lines created before this field was introduced as well as for all lines not created by a product (e.g. a shipping or cancellation fee)."
          },
          "variation": {
            "type": "integer",
            "description": "Product variation used to create this line. Note that everything about the product might have changed since the creation of the invoice. Can be null for all invoice lines created before this field was introduced as well as for all lines not created by a product (e.g. a shipping or cancellation fee)."
          },
          "subevent": {
            "type": "integer",
            "description": "Event series date ID used to create this line. Note that everything about the subevent might have changed since the creation of the invoice. Can be null for all invoice lines created before this field was introduced as well as for all lines not created by a product (e.g. a shipping or cancellation fee) as well as for all events that are not a series."
          },
          "fee_type": {
            "type": "string",
            "description": "Fee type, e.g. shipping, service, payment, cancellation, giftcard, or other. Can be ``null for all invoice lines created before this field was introduced as well as for all lines not created by a fee (e.g. a product)."
          },
          "fee_internal_type": {
            "type": "string",
            "description": "Additional fee type, e.g. type of payment provider. Can be null for all invoice lines created before this field was introduced as well as for all lines not created by a fee (e.g. a product)."
          },
          "event_date_from": {
            "type": "datetime",
            "description": "Start date of the (sub)event this line was created for as it was set during invoice creation. Can be null for all invoice lines created before this was introduced as well as for lines in an event series not created by a product (e.g. shipping or cancellation fees)."
          },
          "event_date_to": {
            "type": "datetime",
            "description": "End date of the (sub)event this line was created for as it was set during invoice creation. Can be null for all invoice lines created before this was introduced as well as for lines in an event series not created by a product (e.g. shipping or cancellation fees) as well as whenever the respective (sub)event has no end date set."
          },
          "event_location": {
            "type": "string",
            "description": "Location of the (sub)event this line was created for as it was set during invoice creation. Can be null for all invoice lines created before this was introduced as well as for lines in an event series not created by a product (e.g. shipping or cancellation fees) as well as whenever the respective (sub)event has no location set."
          },
          "attendee_name": {
            "type": "string",
            "description": "Attendee name at time of invoice creation. Can be null if no name was set or if names are configured to not be added to invoices."
          },
          "gross_value": {
            "type": "money (string)",
            "description": "Price including taxes"
          },
          "tax_value": {
            "type": "money (string)",
            "description": "Tax amount included"
          },
          "tax_name": {
            "type": "string",
            "description": "Name of used tax rate (e.g. “VAT”)"
          },
          "tax_code": {
            "type": "string",
            "description": "Codified reason for tax rate (or null), see Tax codes."
          },
          "tax_rate": {
            "type": "decimal (string)",
            "description": "Used tax rate"
          }
        }
      },
      "foreign_currency_display": {
        "type": "string",
        "description": "If the invoice should also show the total and tax amount in a different currency, this contains the currency code (null otherwise)."
      },
      "foreign_currency_rate": {
        "type": "decimal (string)",
        "description": "If foreign_currency_rate is set and the system knows the exchange rate to the event currency at invoicing time, it is stored here."
      },
      "foreign_currency_rate_date": {
        "type": "date",
        "description": "If foreign_currency_rate is set, this signifies the date at which the currency rate was obtained."
      },
      "internal_reference": {
        "type": "string",
        "description": "Customer’s reference to be printed on the invoice."
      }
    },
    "endpoints": {
      "GET /api/v1/organizers/(organizer)/events/(event)/invoices/": {
        "description": "Returns a list of all invoices within a given event.",
        "name_test": "def test_invoice_list()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to fetch"
          },
          {
            "name": "event",
            "description": "The slug field of the event to fetch"
          }
        ],
        "query_parameters": [
          {
            "name": "page (integer)",
            "description": "The page number in case of a multi-page result set, default is 1"
          },
          {
            "name": "is_cancellation (boolean)",
            "description": "If set to true or false, only invoices with this value for the field is_cancellation will be returned."
          },
          {
            "name": "order (string)",
            "description": "If set, only invoices belonging to the order with the given order code will be returned. This parameter may be given multiple times. In this case, all invoices matching one of the inputs will be returned."
          },
          {
            "name": "number (string)",
            "description": "If set, only invoices with the given invoice number will be returned. This parameter may be given multiple times. In this case, all invoices matching one of the inputs will be returned."
          },
          {
            "name": "refers (string)",
            "description": "If set, only invoices referring to the given invoice will be returned."
          },
          {
            "name": "locale (string)",
            "description": "If set, only invoices with the given locale will be returned."
          },
          {
            "name": "ordering (string)",
            "description": "Manually set the ordering of results. Valid fields to be used are date and nr (equals to number). Default: nr"
          }
        ],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event does not exist or you have no permission to view this resource."
          }
        ]
      },
      "GET /api/v1/organizers/(organizer)/invoices/": {
        "description": "Returns a list of all invoices within all events of a given organizer (with sufficient access permissions).\nSupported query parameters and output format of this endpoint are identical to the list endpoint within an event.",
        "name_test": "def test_organizer_level()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to fetch"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event does not exist or you have no permission to view this resource."
          }
        ]
      },
      "GET /api/v1/organizers/(organizer)/events/(event)/invoices/(number)/": {
        "description": "Returns information on one invoice, identified by its invoice number.",
        "name_test": "def test_invoice_detail()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to fetch"
          },
          {
            "name": "event",
            "description": "The slug field of the event to fetch"
          },
          {
            "name": "number",
            "description": "The number field of the invoice to fetch"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event does not exist or you have no permission to view this resource."
          }
        ]
      },
      "POST /api/v1/organizers/(organizer)/events/(event)/invoices/(number)/reissue/": {
        "description": "Cancels the invoice and creates a new one.",
        "name_test": "def test_invoice_reissue()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to fetch"
          },
          {
            "name": "event",
            "description": "The slug field of the event to fetch"
          },
          {
            "name": "number",
            "description": "The number field of the invoice to reissue"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "400 Bad Request",
            "description": "The invoice has already been canceled"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event does not exist or you have no permission to change this resource."
          }
        ]
      },
      "POST /api/v1/organizers/(organizer)/events/(event)/invoices/(number)/regenerate/": {
        "description": "Re-generates the invoice from order data.",
        "name_test": "def test_invoice_regenerate()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to fetch"
          },
          {
            "name": "event",
            "description": "The slug field of the event to fetch"
          },
          {
            "name": "number",
            "description": "The number field of the invoice to regenerate"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "400 Bad Request",
            "description": "The invoice has already been canceled"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event does not exist or you have no permission to change this resource."
          }
        ]
      }
    }
  },
  "Questions": {
    "description": "Questions define additional fields that need to be filled out by customers during checkout.",
    "fields": {
      "question": {
        "type": "multi-lingual string",
        "description": "The field label shown to the customer"
      },
      "help_text": {
        "type": "multi-lingual string",
        "description": "The help text shown to the customer"
      },
      "type": {
        "type": "string",
        "description": "The expected type of answer. Valid options: N – number, S – one-line string, T – multi-line string, B – boolean, C – choice from a list, M – multiple choice from a list, F – file upload, D – date, H – time, W – date and time, CC – country code (ISO 3666-1 alpha-2), TEL – telephone number"
      },
      "required": {
        "type": "boolean",
        "description": "If true, the question needs to be filled out."
      },
      "position": {
        "type": "integer",
        "description": "An integer, used for sorting"
      },
      "items": {
        "type": "list of integers",
        "description": "List of item IDs this question is assigned to."
      },
      "identifier": {
        "type": "string",
        "description": "An arbitrary string that can be used for matching with other sources."
      },
      "ask_during_checkin": {
        "type": "boolean",
        "description": "If true, this question will not be asked while buying the ticket, but will show up when redeeming the ticket instead."
      },
      "show_during_checkin": {
        "type": "boolean",
        "description": "If true, the answer to the question will be shown during check-in (if the check-in client supports it)."
      },
      "hidden": {
        "type": "boolean",
        "description": "If true, the question will only be shown in the backend."
      },
      "print_on_invoice": {
        "type": "boolean",
        "description": "If true, the question will only be shown on invoices."
      },
      "options": {
        "type": "list of objects",
        "description": "In case of question type C or M, this lists the available objects. Only writable during creation, use separate endpoint to modify this later.",
        "list": {
          "id": {
            "type": "integer",
            "description": "Internal ID of the option"
          },
          "position": {
            "type": "integer",
            "description": "An integer, used for sorting"
          },
          "identifier": {
            "type": "string",
            "description": "An arbitrary string that can be used for matching with other sources."
          },
          "answer": {
            "type": "multi-lingual string",
            "description": "The displayed value of this option"
          }
        }
      },
      "valid_number_min": {
        "type": "string",
        "description": "Minimum value for number questions (optional)"
      },
      "valid_number_max": {
        "type": "string",
        "description": "Maximum value for number questions (optional)"
      },
      "valid_date_min": {
        "type": "date",
        "description": "Minimum value for date questions (optional)"
      },
      "valid_date_max": {
        "type": "date",
        "description": "Maximum value for date questions (optional)"
      },
      "valid_datetime_min": {
        "type": "datetime",
        "description": "Minimum value for date and time questions (optional)"
      },
      "valid_datetime_max": {
        "type": "datetime",
        "description": "Maximum value for date and time questions (optional)"
      },
      "valid_file_portrait": {
        "type": "boolean",
        "description": "Turn on file validation for portrait photos"
      },
      "valid_string_length_max": {
        "type": "integer",
        "description": "Maximum length for string questions (optional)"
      },
      "dependency_question": {
        "type": "integer",
        "description": "Internal ID of a different question. The current question will only be shown if the question given in this attribute is set to the value given in dependency_value. This cannot be combined with ask_during_checkin."
      },
      "dependency_values": {
        "type": "list of strings",
        "description": "If dependency_question is set to a boolean question, this should be [\"True\"] or [\"False\"]. Otherwise, it should be a list of identifier values of question options."
      },
      "dependency_value": {
        "type": "string",
        "description": "An old version of dependency_values that only allows for one value. Deprecated."
      }
    },
    "endpoints": {
      "GET /api/v1/organizers/(organizer)/events/(event)/questions/": {
        "description": "Returns a list of all questions within a given event.",
        "name_test": "def test_question_list()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to fetch"
          },
          {
            "name": "event",
            "description": "The slug field of the event to fetch"
          }
        ],
        "query_parameters": [
          {
            "name": "page (integer)",
            "description": "The page number in case of a multi-page result set, default is 1"
          },
          {
            "name": "ordering (string)",
            "description": "Manually set the ordering of results. Valid fields to be used are id and position. Default: position"
          },
          {
            "name": "identifier (string)",
            "description": "Only return questions with the given identifier string"
          },
          {
            "name": "ask_during_checkin (boolean)",
            "description": "Only return questions that are or are not to be asked during check-in"
          },
          {
            "name": "required (boolean)",
            "description": "Only return questions that are or are not required to fill in"
          }
        ],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event does not exist or you have no permission to view this resource."
          }
        ]
      },
      "GET /api/v1/organizers/(organizer)/events/(event)/questions/(id)/": {
        "description": "Returns information on one question, identified by its ID.",
        "name_test": "def test_question_detail()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to fetch"
          },
          {
            "name": "event",
            "description": "The slug field of the event to fetch"
          },
          {
            "name": "id",
            "description": "The id field of the question to fetch"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event does not exist or you have no permission to view this resource."
          }
        ]
      },
      "POST /api/v1/organizers/(organizer)/events/(event)/questions/": {
        "description": "Creates a new question",
        "name_test": "def test_question_create()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer of the event to create an item for"
          },
          {
            "name": "event",
            "description": "The slug field of the event to create an item for"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "201 Created",
            "description": "no error"
          },
          {
            "name": "400 Bad Request",
            "description": "The item could not be created due to invalid submitted data."
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event does not exist or you have no permission to create this resource."
          }
        ]
      },
      "PATCH /api/v1/organizers/(organizer)/events/(event)/questions/(id)/": {
        "description": "Update a question. You can also use PUT instead of PATCH. With PUT, you have to provide all fields of the resource, other fields will be reset to default. With PATCH, you only need to provide the fields that you want to change.\nYou can change all fields of the resource except the options field. If you need to update/delete options please use the nested dedicated endpoints.",
        "name_test": "def test_question_update()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to modify"
          },
          {
            "name": "event",
            "description": "The slug field of the event to modify"
          },
          {
            "name": "id",
            "description": "The id field of the question to modify"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "400 Bad Request",
            "description": "The question could not be modified due to invalid submitted data"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event does not exist or you have no permission to change this resource."
          }
        ]
      },
      "DELETE /api/v1/organizers/(organizer)/events/(event)/questions/(id)/": {
        "description": "Delete a question.",
        "name_test": "def test_question_delete()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to modify"
          },
          {
            "name": "event",
            "description": "The slug field of the event to modify"
          },
          {
            "name": "id",
            "description": "The id field of the question to delete"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "204 No Content",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event does not exist or you have no permission to delete this resource."
          }
        ]
      }
    }
  },
  "Question options": {
    "description": "Questions of type “choice” or “multiple choice” can have different options attached.",
    "fields": {
      "position": {
        "type": "integer",
        "description": "An integer, used for sorting"
      },
      "identifier": {
        "type": "string",
        "description": "An arbitrary string that can be used for matching with other sources."
      },
      "answer": {
        "type": "multi-lingual string",
        "description": "The displayed value of this option"
      }
    },
    "endpoints": {
      "GET /api/v1/organizers/(organizer)/events/(event)/questions/(question)/options/": {
        "description": "Returns a list of all options for a given question.",
        "name_test": "def test_options_list()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to fetch"
          },
          {
            "name": "event",
            "description": "The slug field of the event to fetch"
          },
          {
            "name": "question",
            "description": "The id field of the question to fetch"
          }
        ],
        "query_parameters": [
          {
            "name": "page (integer)",
            "description": "The page number in case of a multi-page result set, default is 1"
          },
          {
            "name": "active (boolean)",
            "description": "If set to true or false, only questions with this value for the field active will be returned."
          }
        ],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event/question does not exist or you have no permission to view this resource."
          }
        ]
      },
      "GET /api/v1/organizers/(organizer)/events/(event)/questions/(question)/options/(id)/": {
        "description": "Returns information on one option, identified by its ID.",
        "name_test": "def test_options_detail()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to fetch"
          },
          {
            "name": "event",
            "description": "The slug field of the event to fetch"
          },
          {
            "name": "question",
            "description": "The id field of the question to fetch"
          },
          {
            "name": "id",
            "description": "The id field of the option to fetch"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event does not exist or you have no permission to view this resource."
          }
        ]
      },
      "POST /api/v1/organizers/(organizer)/events/(event)/questions/(question)/options/": {
        "description": "Creates a new option",
        "name_test": "def test_options_create()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer of the event/question to create a option for"
          },
          {
            "name": "event",
            "description": "The slug field of the event to create a option for"
          },
          {
            "name": "question",
            "description": "The id field of the question to create a option for"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "201 Created",
            "description": "no error"
          },
          {
            "name": "400 Bad Request",
            "description": "The option could not be created due to invalid submitted data."
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event does not exist or you have no permission to create this resource."
          }
        ]
      },
      "PATCH /api/v1/organizers/(organizer)/events/(event)/questions/(question)/options/(id)/": {
        "description": "Update an option. You can also use PUT instead of PATCH. With PUT, you have to provide all fields of the resource, other fields will be reset to default. With PATCH, you only need to provide the fields that you want to change.\nYou can change all fields of the resource except the id field.",
        "name_test": "def test_options_update()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to modify"
          },
          {
            "name": "event",
            "description": "The slug field of the event to modify"
          },
          {
            "name": "id",
            "description": "The id field of the question to modify"
          },
          {
            "name": "id",
            "description": "The id field of the option to modify"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "400 Bad Request",
            "description": "The option could not be modified due to invalid submitted data"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event does not exist or you have no permission to change this resource."
          }
        ]
      },
      "DELETE /api/v1/organizers/(organizer)/events/(event)/questions/(id)/options/(id)/": {
        "description": "Delete an option.",
        "name_test": "def test_options_delete()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to modify"
          },
          {
            "name": "event",
            "description": "The slug field of the event to modify"
          },
          {
            "name": "id",
            "description": "The id field of the question to modify"
          },
          {
            "name": "id",
            "description": "The id field of the option to delete"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "204 No Content",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event does not exist or you have no permission to delete this resource."
          }
        ]
      }
    }
  },
  "Quotas": {
    "description": "Quotas define how many times an item can be sold.",
    "fields": {
      "name": {
        "type": "string",
        "description": "The internal name of the quota"
      },
      "size": {
        "type": "integer",
        "description": "The size of the quota or null for unlimited"
      },
      "items": {
        "type": "list of integers",
        "description": "List of item IDs this quota acts on."
      },
      "variations": {
        "type": "list of integers",
        "description": "List of item variation IDs this quota acts on."
      },
      "subevent": {
        "type": "integer",
        "description": "ID of the date inside an event series this quota belongs to (or null)."
      },
      "close_when_sold_out": {
        "type": "boolean",
        "description": "If true, the quota will “close” as soon as it is sold out once. Even if tickets become available again, they will not be sold unless the quota is set to open again."
      },
      "closed": {
        "type": "boolean",
        "description": "Whether the quota is currently closed (see above field)."
      },
      "release_after_exit": {
        "type": "boolean",
        "description": "Whether the quota regains capacity as soon as some tickets have been scanned at an exit."
      },
      "available": {
        "type": "boolean",
        "description": "Whether this quota is available. Only returned if with_availability=true is set on the request. Do not rely on this value for critical operations, it may be slightly out of date."
      },
      "available_number": {
        "type": "integer",
        "description": "Number of available tickets. Only returned if with_availability=true is set on the request. Do not rely on this value for critical operations, it may be slightly out of date. null means unlimited."
      }
    },
    "endpoints": {
      "GET /api/v1/organizers/(organizer)/events/(event)/quotas/": {
        "description": "Returns a list of all quotas within a given event.",
        "name_test": "def test_quota_list()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to fetch"
          },
          {
            "name": "event",
            "description": "The slug field of the event to fetch"
          }
        ],
        "query_parameters": [
          {
            "name": "page (integer)",
            "description": "The page number in case of a multi-page result set, default is 1"
          },
          {
            "name": "ordering (string)",
            "description": "Manually set the ordering of results. Valid fields to be used are id and position. Default: position"
          },
          {
            "name": "subevent (integer)",
            "description": "Only return quotas of the sub-event with the given ID."
          },
          {
            "name": "subevent__in (integer)",
            "description": "Only return quotas of sub-events with one of the given IDs (comma-separated)."
          },
          {
            "name": "items__in (integer)",
            "description": "Only return quotas that include a product with one of the given IDs (comma-separated)."
          },
          {
            "name": "with_availability (string)",
            "description": "Set to true to get availability information. Can lead to increased answer times."
          }
        ],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event does not exist or you have no permission to view this resource."
          }
        ]
      },
      "GET /api/v1/organizers/(organizer)/events/(event)/quotas/(id)/": {
        "description": "Returns information on one quota, identified by its ID.",
        "name_test": "def test_quota_detail()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to fetch"
          },
          {
            "name": "event",
            "description": "The slug field of the event to fetch"
          },
          {
            "name": "id",
            "description": "The id field of the quota to fetch"
          }
        ],
        "query_parameters": [
          {
            "name": "with_availability (string)",
            "description": "Set to true to get availability information. Can lead to increased answer times."
          }
        ],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event does not exist or you have no permission to view this resource."
          }
        ]
      },
      "POST /api/v1/organizers/(organizer)/events/(event)/quotas/": {
        "description": "Creates a new quota",
        "name_test": "def test_quota_create()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer of the event/item to create a quota for"
          },
          {
            "name": "event",
            "description": "The slug field of the event to create a quota for"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "201 Created",
            "description": "no error"
          },
          {
            "name": "400 Bad Request",
            "description": "The quota could not be created due to invalid submitted data."
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event does not exist or you have no permission to create this resource."
          }
        ]
      },
      "PATCH /api/v1/organizers/(organizer)/events/(event)/quotas/(id)/": {
        "description": "Update a quota. You can also use PUT instead of PATCH. With PUT, you have to provide all fields of the resource, other fields will be reset to default. With PATCH, you only need to provide the fields that you want to change.\nYou can change all fields of the resource except the id field.",
        "name_test": "def test_quota_update()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to modify"
          },
          {
            "name": "event",
            "description": "The slug field of the event to modify"
          },
          {
            "name": "id",
            "description": "The id field of the quota rule to modify"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "400 Bad Request",
            "description": "The quota could not be modified due to invalid submitted data"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event does not exist or you have no permission to change this resource."
          }
        ]
      },
      "DELETE /api/v1/organizers/(organizer)/events/(event)/quota/(id)/": {
        "description": "Delete a quota. Note that if you delete a quota the items the quota acts on might no longer be available for sale.",
        "name_test": "def test_quota_delete()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to modify"
          },
          {
            "name": "event",
            "description": "The slug field of the event to modify"
          },
          {
            "name": "id",
            "description": "The id field of the quotas to delete"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "204 No Content",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event does not exist or you have no permission to delete this resource."
          }
        ]
      },
      "GET /api/v1/organizers/(organizer)/events/(event)/quotas/(id)/availability/": {
        "description": "Returns availability information on one quota, identified by its ID.",
        "name_test": "def test_quota_availability()",
        "path_parameters": [
          {
            "name": "organizer",
            "description": "The slug field of the organizer to fetch"
          },
          {
            "name": "event",
            "description": "The slug field of the event to fetch"
          },
          {
            "name": "id",
            "description": "The id field of the quota to fetch"
          }
        ],
        "query_parameters": [],
        "status_codes": [
          {
            "name": "200 OK",
            "description": "no error"
          },
          {
            "name": "401 Unauthorized",
            "description": "Authentication failure"
          },
          {
            "name": "403 Forbidden",
            "description": "The requested organizer/event does not exist or you have no permission to view this resource."
          }
        ]
      }
    }
  }
}